/* The following code was generated by JFlex 1.6.1 */

package lexico;
/* Reference: http://www.quut.com/c/ANSI-C-grammar-l.html */

import static lexico.Token.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>C:/Users/Rafael Albuquerque/Downloads/lexer.flex</tt>
 */
class Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\25\1\62\1\111\1\25\1\111\22\0\1\25\1\76\3\0"+
    "\1\72\1\73\1\61\1\104\1\105\1\70\1\67\1\102\1\10\1\63"+
    "\1\71\1\1\7\3\1\2\1\2\1\103\1\77\1\66\1\65\1\64"+
    "\1\21\1\0\1\51\1\52\1\53\1\5\1\7\1\13\1\54\1\4"+
    "\1\55\2\4\1\15\1\4\1\56\1\4\1\11\2\4\1\57\1\60"+
    "\1\17\2\4\1\6\2\4\1\106\1\20\1\107\1\74\1\50\1\0"+
    "\1\27\1\23\1\35\1\41\1\33\1\12\1\43\1\37\1\40\1\4"+
    "\1\34\1\14\1\42\1\22\1\31\1\47\1\4\1\32\1\36\1\30"+
    "\1\16\1\26\1\45\1\24\1\46\1\44\1\100\1\75\1\101\1\110"+
    "\6\0\1\111\u1fa2\0\1\111\1\111\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\2\2\1\3\1\4\4\3\1\5\1\3"+
    "\1\6\14\3\1\1\1\7\1\10\1\11\1\12\1\13"+
    "\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23"+
    "\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33"+
    "\1\34\1\2\3\0\3\2\1\35\1\36\1\37\1\40"+
    "\3\3\1\0\21\3\1\41\1\3\1\42\14\3\3\0"+
    "\1\43\1\44\1\45\1\46\1\47\1\50\1\51\1\52"+
    "\1\53\1\54\1\55\1\56\1\57\1\60\1\61\1\62"+
    "\1\2\1\0\1\35\1\0\4\2\1\35\1\3\1\63"+
    "\30\3\1\64\16\3\1\65\1\0\1\66\1\67\1\70"+
    "\1\0\1\3\1\71\4\3\1\72\1\73\4\3\1\74"+
    "\1\75\1\3\1\76\2\3\1\77\11\3\1\100\13\3"+
    "\1\101\1\3\1\102\1\103\7\3\1\104\2\3\1\105"+
    "\6\3\1\106\3\3\1\107\11\3\1\110\2\3\1\111"+
    "\1\3\1\112\1\113\1\114\1\115\1\116\1\117\1\120"+
    "\14\3\1\121\3\3\1\122\3\3\1\123\6\3\1\124"+
    "\1\125\1\126\1\127\1\130\1\131\1\132\1\133\1\134"+
    "\1\135\5\3\1\136\2\3\1\137\7\3\1\140\1\141";

  private static int [] zzUnpackAction() {
    int [] result = new int[312];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\112\0\224\0\336\0\u0128\0\u0172\0\u01bc\0\u0206"+
    "\0\u0250\0\u029a\0\112\0\u02e4\0\u032e\0\u0378\0\u03c2\0\u040c"+
    "\0\u0456\0\u04a0\0\u04ea\0\u0534\0\u057e\0\u05c8\0\u0612\0\u065c"+
    "\0\u06a6\0\u06f0\0\u073a\0\u0784\0\u07ce\0\u0818\0\u0862\0\u08ac"+
    "\0\u08f6\0\u0940\0\u098a\0\u09d4\0\u0a1e\0\u0a68\0\112\0\112"+
    "\0\112\0\112\0\u0ab2\0\112\0\112\0\112\0\112\0\112"+
    "\0\u0afc\0\u0b46\0\u0b90\0\u0bda\0\u0c24\0\u0c6e\0\u0cb8\0\u0d02"+
    "\0\112\0\112\0\112\0\u0d4c\0\u0d96\0\u0de0\0\u06f0\0\u0e2a"+
    "\0\u0e74\0\u0ebe\0\u0f08\0\u0f52\0\u0f9c\0\u0fe6\0\u1030\0\u107a"+
    "\0\u10c4\0\u110e\0\u1158\0\u11a2\0\u11ec\0\u1236\0\u1280\0\u12ca"+
    "\0\u0128\0\u1314\0\u135e\0\u13a8\0\u13f2\0\u143c\0\u1486\0\u14d0"+
    "\0\u151a\0\u1564\0\u15ae\0\u15f8\0\u1642\0\u168c\0\u16d6\0\u1720"+
    "\0\u176a\0\u17b4\0\u17fe\0\112\0\112\0\112\0\u1848\0\112"+
    "\0\112\0\112\0\112\0\112\0\112\0\112\0\112\0\112"+
    "\0\112\0\112\0\u1892\0\u18dc\0\u1926\0\u1970\0\u19ba\0\112"+
    "\0\u1a04\0\u1a4e\0\112\0\u1a98\0\u0128\0\u1ae2\0\u1b2c\0\u1b76"+
    "\0\u1bc0\0\u1c0a\0\u1c54\0\u1c9e\0\u1ce8\0\u1d32\0\u1d7c\0\u1dc6"+
    "\0\u1e10\0\u1e5a\0\u1ea4\0\u1eee\0\u1f38\0\u1f82\0\u1fcc\0\u2016"+
    "\0\u2060\0\u20aa\0\u20f4\0\u213e\0\u2188\0\u0128\0\u21d2\0\u221c"+
    "\0\u2266\0\u22b0\0\u22fa\0\u2344\0\u238e\0\u23d8\0\u2422\0\u246c"+
    "\0\u24b6\0\u2500\0\u254a\0\u2594\0\112\0\u25de\0\112\0\112"+
    "\0\112\0\u2628\0\u2672\0\u0128\0\u26bc\0\u2706\0\u2750\0\u279a"+
    "\0\u0128\0\u0128\0\u27e4\0\u282e\0\u2878\0\u28c2\0\u0128\0\u0128"+
    "\0\u290c\0\u0128\0\u2956\0\u29a0\0\u0128\0\u29ea\0\u2a34\0\u2a7e"+
    "\0\u2ac8\0\u2b12\0\u2b5c\0\u2ba6\0\u2bf0\0\u2c3a\0\u0128\0\u2c84"+
    "\0\u2cce\0\u2d18\0\u2d62\0\u2dac\0\u2df6\0\u2e40\0\u2e8a\0\u2ed4"+
    "\0\u2f1e\0\u2f68\0\u0128\0\u2fb2\0\u0128\0\u0128\0\u2ffc\0\u3046"+
    "\0\u3090\0\u30da\0\u3124\0\u316e\0\u31b8\0\u0128\0\u3202\0\u324c"+
    "\0\u0128\0\u3296\0\u32e0\0\u332a\0\u3374\0\u33be\0\u3408\0\u0128"+
    "\0\u3452\0\u349c\0\u34e6\0\u0128\0\u3530\0\u357a\0\u35c4\0\u360e"+
    "\0\u3658\0\u36a2\0\u36ec\0\u3736\0\u3780\0\u0128\0\u37ca\0\u3814"+
    "\0\u0128\0\u385e\0\u0128\0\u0128\0\u0128\0\u0128\0\u0128\0\u0128"+
    "\0\u0128\0\u38a8\0\u38f2\0\u393c\0\u3986\0\u39d0\0\u3a1a\0\u3a64"+
    "\0\u3aae\0\u3af8\0\u3b42\0\u3b8c\0\u3bd6\0\u0128\0\u3c20\0\u3c6a"+
    "\0\u3cb4\0\u0128\0\u3cfe\0\u3d48\0\u3d92\0\u0128\0\u3ddc\0\u3e26"+
    "\0\u3e70\0\u3eba\0\u3f04\0\u3f4e\0\u0128\0\u0128\0\u0128\0\u0128"+
    "\0\u0128\0\u0128\0\u0128\0\u0128\0\u0128\0\u0128\0\u3f98\0\u3fe2"+
    "\0\u402c\0\u4076\0\u40c0\0\u0128\0\u410a\0\u4154\0\u0128\0\u419e"+
    "\0\u41e8\0\u4232\0\u427c\0\u42c6\0\u4310\0\u435a\0\u0128\0\u0128";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[312];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\2\4\4\5\1\6\1\5\1\7\1\5"+
    "\1\10\1\11\1\12\1\11\1\2\1\13\1\5\1\14"+
    "\1\5\1\15\1\16\1\17\1\20\1\5\1\21\1\22"+
    "\1\5\1\23\1\24\1\5\1\25\1\26\1\5\1\27"+
    "\1\5\1\30\2\5\1\31\10\5\1\32\1\15\1\33"+
    "\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43"+
    "\1\44\1\45\1\46\1\47\1\50\1\51\1\52\1\53"+
    "\1\54\1\55\1\56\1\57\1\60\114\0\1\61\1\62"+
    "\1\61\2\0\1\63\1\64\4\0\1\65\1\66\2\67"+
    "\4\0\1\63\6\0\1\64\27\0\1\70\27\0\3\4"+
    "\3\0\1\64\4\0\1\65\1\66\2\67\13\0\1\64"+
    "\27\0\1\70\27\0\7\5\1\0\7\5\2\0\3\5"+
    "\1\0\33\5\41\0\1\71\53\0\1\72\1\73\25\0"+
    "\7\5\1\0\3\5\1\74\3\5\2\0\3\5\1\0"+
    "\3\5\1\75\27\5\32\0\7\5\1\0\7\5\2\0"+
    "\3\5\1\0\3\5\1\76\27\5\32\0\7\5\1\0"+
    "\7\5\2\0\3\5\1\0\33\5\1\77\31\0\7\5"+
    "\1\0\7\5\2\0\1\100\2\5\1\0\33\5\1\77"+
    "\31\0\7\5\1\0\7\5\2\0\3\5\1\0\4\5"+
    "\1\101\26\5\56\0\2\15\33\0\1\15\30\0\7\5"+
    "\1\0\7\5\2\0\3\5\1\15\1\102\2\5\1\103"+
    "\27\5\1\0\1\15\30\0\7\5\1\0\5\5\1\104"+
    "\1\5\2\0\3\5\1\0\33\5\32\0\7\5\1\0"+
    "\7\5\2\0\3\5\1\0\20\5\1\105\12\5\32\0"+
    "\7\5\1\0\7\5\2\0\3\5\1\0\5\5\1\106"+
    "\25\5\32\0\7\5\1\0\3\5\1\107\3\5\2\0"+
    "\1\110\1\5\1\111\1\0\33\5\32\0\7\5\1\0"+
    "\7\5\2\0\3\5\1\0\1\5\1\112\1\5\1\113"+
    "\5\5\1\114\21\5\32\0\7\5\1\0\7\5\2\0"+
    "\3\5\1\0\2\5\1\115\6\5\1\116\1\117\4\5"+
    "\1\120\13\5\32\0\7\5\1\0\1\5\1\121\5\5"+
    "\2\0\1\122\2\5\1\0\33\5\32\0\7\5\1\0"+
    "\7\5\2\0\3\5\1\0\3\5\1\123\1\5\1\124"+
    "\25\5\32\0\7\5\1\0\7\5\2\0\3\5\1\0"+
    "\3\5\1\125\27\5\32\0\7\5\1\0\7\5\2\0"+
    "\3\5\1\0\11\5\1\126\21\5\32\0\7\5\1\0"+
    "\7\5\2\0\3\5\1\0\22\5\1\127\1\130\1\131"+
    "\1\132\1\133\1\134\1\135\1\136\1\137\31\0\20\140"+
    "\1\141\40\140\2\0\27\140\1\0\3\70\57\0\1\142"+
    "\112\0\1\143\1\144\111\0\1\145\111\0\1\146\1\147"+
    "\3\0\1\50\10\0\1\56\73\0\1\150\1\0\1\151"+
    "\107\0\1\152\111\0\1\153\110\0\1\51\1\154\111\0"+
    "\1\155\5\0\1\156\103\0\1\157\111\0\1\160\7\0"+
    "\1\161\101\0\1\162\110\0\1\57\26\0\1\61\1\62"+
    "\1\61\3\0\1\64\4\0\1\65\1\66\2\67\13\0"+
    "\1\64\27\0\1\70\27\0\3\62\3\0\1\64\23\0"+
    "\1\64\27\0\1\70\27\0\3\163\1\0\1\163\1\0"+
    "\1\163\2\0\2\163\7\0\1\163\3\0\1\163\3\0"+
    "\1\163\1\0\1\163\3\0\1\163\7\0\3\163\7\0"+
    "\1\164\27\0\3\165\4\0\1\166\56\0\1\166\36\0"+
    "\1\167\1\0\2\170\107\0\1\167\2\170\106\0\1\171"+
    "\1\172\75\0\3\70\3\0\1\64\2\0\4\173\15\0"+
    "\1\64\57\0\7\5\1\0\7\5\2\0\3\5\1\0"+
    "\3\5\1\174\27\5\32\0\7\5\1\0\7\5\2\0"+
    "\3\5\1\0\4\5\1\175\26\5\32\0\7\5\1\0"+
    "\7\5\2\0\1\176\2\5\1\0\33\5\32\0\7\5"+
    "\1\0\7\5\2\0\3\5\1\0\10\5\1\177\1\5"+
    "\1\200\20\5\32\0\7\5\1\0\7\5\2\0\3\5"+
    "\1\0\5\5\1\201\25\5\32\0\7\5\1\0\7\5"+
    "\2\0\3\5\1\15\1\102\32\5\1\0\1\15\30\0"+
    "\7\5\1\0\3\5\1\202\3\5\2\0\3\5\1\0"+
    "\12\5\1\203\20\5\32\0\7\5\1\0\7\5\2\0"+
    "\3\5\1\0\2\5\1\204\30\5\32\0\7\5\1\0"+
    "\7\5\2\0\3\5\1\0\21\5\1\205\11\5\32\0"+
    "\7\5\1\0\7\5\2\0\3\5\1\0\2\5\1\206"+
    "\5\5\1\207\4\5\1\210\15\5\32\0\7\5\1\0"+
    "\7\5\2\0\3\5\1\0\10\5\1\211\22\5\32\0"+
    "\7\5\1\0\5\5\1\212\1\5\2\0\3\5\1\0"+
    "\33\5\32\0\7\5\1\0\7\5\2\0\3\5\1\0"+
    "\2\5\1\213\30\5\32\0\7\5\1\0\7\5\2\0"+
    "\3\5\1\0\10\5\1\214\22\5\32\0\7\5\1\0"+
    "\7\5\2\0\1\215\2\5\1\0\33\5\32\0\7\5"+
    "\1\0\7\5\2\0\3\5\1\0\1\5\1\216\31\5"+
    "\32\0\7\5\1\0\7\5\2\0\3\5\1\0\1\5"+
    "\1\217\2\5\1\220\26\5\32\0\7\5\1\0\7\5"+
    "\2\0\3\5\1\0\3\5\1\221\27\5\32\0\7\5"+
    "\1\0\7\5\2\0\3\5\1\0\15\5\1\222\1\223"+
    "\14\5\32\0\7\5\1\0\7\5\2\0\3\5\1\0"+
    "\12\5\1\224\20\5\32\0\7\5\1\0\3\5\1\225"+
    "\3\5\2\0\3\5\1\0\2\5\1\226\30\5\32\0"+
    "\7\5\1\0\5\5\1\227\1\5\2\0\3\5\1\0"+
    "\33\5\32\0\7\5\1\0\1\5\1\230\5\5\2\0"+
    "\3\5\1\0\33\5\32\0\7\5\1\0\7\5\2\0"+
    "\3\5\1\0\2\5\1\231\30\5\32\0\7\5\1\0"+
    "\7\5\2\0\3\5\1\0\12\5\1\232\20\5\32\0"+
    "\7\5\1\0\1\5\1\233\5\5\2\0\3\5\1\0"+
    "\33\5\32\0\7\5\1\0\3\5\1\234\3\5\2\0"+
    "\3\5\1\0\2\5\1\235\30\5\32\0\7\5\1\0"+
    "\7\5\2\0\3\5\1\0\3\5\1\236\27\5\32\0"+
    "\7\5\1\0\7\5\2\0\3\5\1\0\3\5\1\237"+
    "\27\5\32\0\7\5\1\0\7\5\2\0\3\5\1\0"+
    "\5\5\1\240\25\5\32\0\7\5\1\0\7\5\2\0"+
    "\3\5\1\0\14\5\1\241\16\5\32\0\7\5\1\0"+
    "\7\5\2\0\3\5\1\0\3\5\1\242\27\5\32\0"+
    "\7\5\1\0\7\5\2\0\3\5\1\0\2\5\1\243"+
    "\30\5\32\0\7\5\1\0\7\5\2\0\3\5\1\0"+
    "\11\5\1\244\21\5\31\0\20\140\1\141\40\140\1\245"+
    "\1\0\27\140\1\0\1\140\1\0\1\140\6\0\1\140"+
    "\5\0\4\140\1\246\1\0\3\140\1\0\1\140\26\0"+
    "\1\140\113\0\1\247\113\0\1\250\111\0\1\251\25\0"+
    "\3\163\1\0\1\163\1\0\1\163\1\0\1\64\2\163"+
    "\1\65\1\66\2\67\3\0\1\163\3\0\1\163\3\0"+
    "\1\163\1\0\1\163\3\0\1\163\5\0\1\64\1\0"+
    "\3\163\7\0\1\252\27\0\3\252\1\0\1\252\1\0"+
    "\1\252\2\0\2\252\7\0\1\252\3\0\1\252\3\0"+
    "\1\252\1\0\1\252\3\0\1\252\7\0\3\252\37\0"+
    "\3\165\6\0\4\173\75\0\3\165\124\0\2\170\106\0"+
    "\1\170\112\0\1\170\75\0\7\5\1\0\7\5\2\0"+
    "\3\5\1\0\1\5\1\253\31\5\32\0\7\5\1\0"+
    "\7\5\2\0\3\5\1\0\15\5\1\254\15\5\32\0"+
    "\7\5\1\0\7\5\2\0\3\5\1\0\12\5\1\255"+
    "\20\5\32\0\7\5\1\0\7\5\2\0\3\5\1\0"+
    "\3\5\1\256\27\5\32\0\7\5\1\0\7\5\2\0"+
    "\3\5\1\0\1\5\1\257\31\5\32\0\7\5\1\0"+
    "\7\5\2\0\3\5\1\0\1\5\1\260\31\5\32\0"+
    "\7\5\1\0\7\5\2\0\3\5\1\0\13\5\1\261"+
    "\17\5\32\0\7\5\1\0\7\5\2\0\3\5\1\0"+
    "\3\5\1\262\27\5\32\0\7\5\1\0\7\5\2\0"+
    "\3\5\1\0\5\5\1\263\25\5\32\0\7\5\1\0"+
    "\5\5\1\264\1\5\2\0\3\5\1\0\33\5\32\0"+
    "\7\5\1\0\7\5\2\0\3\5\1\0\2\5\1\265"+
    "\30\5\32\0\7\5\1\0\7\5\2\0\3\5\1\0"+
    "\12\5\1\266\20\5\32\0\7\5\1\0\7\5\2\0"+
    "\3\5\1\0\5\5\1\267\25\5\32\0\7\5\1\0"+
    "\7\5\2\0\3\5\1\0\14\5\1\270\16\5\32\0"+
    "\7\5\1\0\7\5\2\0\3\5\1\0\5\5\1\271"+
    "\25\5\32\0\7\5\1\0\7\5\2\0\3\5\1\0"+
    "\5\5\1\272\25\5\32\0\7\5\1\0\7\5\2\0"+
    "\3\5\1\0\2\5\1\273\5\5\1\274\22\5\32\0"+
    "\7\5\1\0\7\5\2\0\3\5\1\0\4\5\1\275"+
    "\26\5\32\0\7\5\1\0\7\5\2\0\3\5\1\0"+
    "\2\5\1\276\30\5\32\0\7\5\1\0\5\5\1\277"+
    "\1\5\2\0\3\5\1\0\33\5\32\0\7\5\1\0"+
    "\7\5\2\0\3\5\1\0\4\5\1\300\26\5\32\0"+
    "\7\5\1\0\7\5\2\0\1\301\2\5\1\0\33\5"+
    "\32\0\7\5\1\0\7\5\2\0\3\5\1\0\5\5"+
    "\1\302\25\5\32\0\7\5\1\0\7\5\2\0\3\5"+
    "\1\0\2\5\1\303\30\5\32\0\7\5\1\0\7\5"+
    "\2\0\3\5\1\0\12\5\1\304\20\5\32\0\7\5"+
    "\1\0\7\5\2\0\1\5\1\305\1\5\1\0\33\5"+
    "\32\0\7\5\1\0\7\5\2\0\3\5\1\0\1\5"+
    "\1\306\31\5\32\0\7\5\1\0\7\5\2\0\3\5"+
    "\1\0\3\5\1\307\27\5\32\0\7\5\1\0\3\5"+
    "\1\310\3\5\2\0\3\5\1\0\33\5\32\0\7\5"+
    "\1\0\5\5\1\311\1\5\2\0\3\5\1\0\33\5"+
    "\32\0\7\5\1\0\7\5\2\0\3\5\1\0\12\5"+
    "\1\312\20\5\32\0\7\5\1\0\7\5\2\0\3\5"+
    "\1\0\3\5\1\313\27\5\32\0\7\5\1\0\7\5"+
    "\2\0\3\5\1\0\3\5\1\314\27\5\32\0\7\5"+
    "\1\0\7\5\2\0\3\5\1\0\14\5\1\315\16\5"+
    "\32\0\7\5\1\0\7\5\2\0\1\316\2\5\1\0"+
    "\33\5\32\0\7\5\1\0\7\5\2\0\3\5\1\0"+
    "\1\5\1\317\31\5\32\0\7\5\1\0\7\5\2\0"+
    "\3\5\1\0\4\5\1\320\26\5\32\0\7\5\1\0"+
    "\7\5\2\0\3\5\1\0\1\5\1\321\31\5\32\0"+
    "\7\5\1\0\7\5\2\0\3\5\1\0\4\5\1\322"+
    "\26\5\32\0\3\140\1\0\1\140\1\0\1\140\2\0"+
    "\2\140\7\0\1\140\3\0\1\140\3\0\1\140\1\0"+
    "\1\140\3\0\1\140\7\0\3\140\37\0\3\252\1\0"+
    "\1\252\1\0\1\252\1\0\1\64\2\252\7\0\1\252"+
    "\3\0\1\252\3\0\1\252\1\0\1\252\3\0\1\252"+
    "\5\0\1\64\1\0\3\252\37\0\7\5\1\0\7\5"+
    "\2\0\3\5\1\0\2\5\1\323\30\5\32\0\7\5"+
    "\1\0\7\5\2\0\3\5\1\0\15\5\1\324\15\5"+
    "\32\0\7\5\1\0\7\5\2\0\1\325\2\5\1\0"+
    "\33\5\32\0\7\5\1\0\7\5\2\0\3\5\1\0"+
    "\6\5\1\326\24\5\32\0\7\5\1\0\7\5\2\0"+
    "\3\5\1\0\2\5\1\327\30\5\32\0\7\5\1\0"+
    "\7\5\2\0\3\5\1\0\13\5\1\330\17\5\32\0"+
    "\7\5\1\0\7\5\2\0\3\5\1\0\4\5\1\331"+
    "\26\5\32\0\7\5\1\0\7\5\2\0\3\5\1\0"+
    "\4\5\1\332\26\5\32\0\7\5\1\0\7\5\2\0"+
    "\3\5\1\0\10\5\1\333\22\5\32\0\7\5\1\0"+
    "\7\5\2\0\3\5\1\0\4\5\1\334\26\5\32\0"+
    "\7\5\1\0\7\5\2\0\3\5\1\0\12\5\1\335"+
    "\20\5\32\0\7\5\1\0\7\5\2\0\3\5\1\0"+
    "\2\5\1\336\30\5\32\0\7\5\1\0\7\5\2\0"+
    "\3\5\1\0\12\5\1\337\20\5\32\0\7\5\1\0"+
    "\7\5\2\0\3\5\1\0\7\5\1\340\23\5\32\0"+
    "\7\5\1\0\7\5\2\0\3\5\1\0\2\5\1\341"+
    "\30\5\32\0\7\5\1\0\7\5\2\0\3\5\1\0"+
    "\5\5\1\342\25\5\32\0\7\5\1\0\7\5\2\0"+
    "\3\5\1\0\3\5\1\343\27\5\32\0\7\5\1\0"+
    "\7\5\2\0\3\5\1\0\7\5\1\344\23\5\32\0"+
    "\7\5\1\0\7\5\2\0\1\345\2\5\1\0\33\5"+
    "\32\0\7\5\1\0\3\5\1\346\3\5\2\0\3\5"+
    "\1\0\33\5\32\0\7\5\1\0\5\5\1\347\1\5"+
    "\2\0\3\5\1\0\33\5\32\0\7\5\1\0\7\5"+
    "\2\0\3\5\1\0\5\5\1\350\25\5\32\0\7\5"+
    "\1\0\7\5\2\0\1\351\2\5\1\0\33\5\32\0"+
    "\7\5\1\0\7\5\2\0\3\5\1\0\15\5\1\352"+
    "\15\5\32\0\7\5\1\0\7\5\2\0\3\5\1\0"+
    "\14\5\1\353\16\5\32\0\7\5\1\0\3\5\1\354"+
    "\3\5\2\0\3\5\1\0\33\5\32\0\7\5\1\0"+
    "\7\5\2\0\3\5\1\0\21\5\1\355\11\5\32\0"+
    "\7\5\1\0\7\5\2\0\3\5\1\0\5\5\1\356"+
    "\25\5\32\0\7\5\1\0\7\5\2\0\3\5\1\0"+
    "\15\5\1\357\15\5\32\0\7\5\1\0\7\5\2\0"+
    "\3\5\1\0\5\5\1\360\25\5\32\0\7\5\1\0"+
    "\7\5\2\0\3\5\1\0\2\5\1\361\30\5\32\0"+
    "\7\5\1\0\7\5\2\0\3\5\1\0\5\5\1\362"+
    "\25\5\32\0\7\5\1\0\7\5\2\0\1\363\2\5"+
    "\1\0\33\5\32\0\7\5\1\0\7\5\2\0\3\5"+
    "\1\0\12\5\1\364\20\5\32\0\7\5\1\0\7\5"+
    "\2\0\3\5\1\0\5\5\1\365\25\5\32\0\7\5"+
    "\1\0\7\5\2\0\1\366\2\5\1\0\33\5\32\0"+
    "\7\5\1\0\7\5\2\0\3\5\1\0\12\5\1\367"+
    "\20\5\32\0\7\5\1\0\7\5\2\0\3\5\1\0"+
    "\2\5\1\370\30\5\32\0\7\5\1\0\7\5\2\0"+
    "\1\371\2\5\1\0\33\5\32\0\7\5\1\0\7\5"+
    "\2\0\1\372\2\5\1\0\33\5\32\0\7\5\1\0"+
    "\7\5\2\0\3\5\1\0\7\5\1\373\23\5\32\0"+
    "\7\5\1\0\7\5\2\0\3\5\1\0\2\5\1\374"+
    "\30\5\32\0\7\5\1\0\7\5\2\0\3\5\1\0"+
    "\13\5\1\375\17\5\32\0\7\5\1\0\1\5\1\376"+
    "\5\5\2\0\3\5\1\0\33\5\32\0\7\5\1\0"+
    "\7\5\2\0\3\5\1\0\11\5\1\377\21\5\32\0"+
    "\7\5\1\0\7\5\2\0\3\5\1\0\5\5\1\u0100"+
    "\25\5\32\0\7\5\1\0\7\5\2\0\3\5\1\0"+
    "\5\5\1\u0101\25\5\32\0\7\5\1\0\3\5\1\u0102"+
    "\3\5\2\0\3\5\1\0\33\5\32\0\7\5\1\0"+
    "\7\5\2\0\3\5\1\0\7\5\1\u0103\23\5\32\0"+
    "\7\5\1\0\7\5\2\0\1\u0104\2\5\1\0\33\5"+
    "\32\0\7\5\1\0\7\5\2\0\3\5\1\0\12\5"+
    "\1\u0105\20\5\32\0\7\5\1\0\3\5\1\u0106\3\5"+
    "\2\0\3\5\1\0\33\5\32\0\7\5\1\0\7\5"+
    "\2\0\3\5\1\0\4\5\1\u0107\26\5\32\0\7\5"+
    "\1\0\7\5\2\0\3\5\1\0\12\5\1\u0108\20\5"+
    "\32\0\7\5\1\0\7\5\2\0\3\5\1\0\2\5"+
    "\1\u0109\30\5\32\0\7\5\1\0\7\5\2\0\3\5"+
    "\1\0\12\5\1\u010a\20\5\32\0\7\5\1\0\7\5"+
    "\2\0\3\5\1\0\1\5\1\u010b\31\5\32\0\7\5"+
    "\1\0\7\5\2\0\3\5\1\0\5\5\1\u010c\25\5"+
    "\32\0\7\5\1\0\3\5\1\u010d\3\5\2\0\3\5"+
    "\1\0\33\5\32\0\7\5\1\0\1\5\1\u010e\5\5"+
    "\2\0\3\5\1\0\33\5\32\0\7\5\1\0\7\5"+
    "\2\0\3\5\1\0\7\5\1\u010f\23\5\32\0\7\5"+
    "\1\0\7\5\2\0\3\5\1\0\5\5\1\u0110\25\5"+
    "\32\0\7\5\1\0\5\5\1\u0111\1\5\2\0\3\5"+
    "\1\0\33\5\32\0\7\5\1\0\7\5\2\0\3\5"+
    "\1\0\2\5\1\u0112\30\5\32\0\7\5\1\0\7\5"+
    "\2\0\3\5\1\0\22\5\1\u0113\10\5\32\0\7\5"+
    "\1\0\7\5\2\0\3\5\1\0\1\5\1\u0114\1\5"+
    "\1\u0115\27\5\32\0\7\5\1\0\7\5\2\0\3\5"+
    "\1\0\7\5\1\u0116\23\5\32\0\7\5\1\0\7\5"+
    "\2\0\3\5\1\0\5\5\1\u0117\25\5\32\0\7\5"+
    "\1\0\7\5\2\0\3\5\1\0\12\5\1\u0118\20\5"+
    "\32\0\7\5\1\0\7\5\2\0\1\u0119\2\5\1\0"+
    "\33\5\32\0\7\5\1\0\5\5\1\u011a\1\5\2\0"+
    "\3\5\1\0\33\5\32\0\7\5\1\0\7\5\2\0"+
    "\3\5\1\0\7\5\1\u011b\23\5\32\0\7\5\1\0"+
    "\7\5\2\0\3\5\1\0\13\5\1\u011c\17\5\32\0"+
    "\7\5\1\0\7\5\2\0\3\5\1\0\13\5\1\u011d"+
    "\17\5\32\0\7\5\1\0\7\5\2\0\3\5\1\0"+
    "\5\5\1\u011e\25\5\32\0\7\5\1\0\7\5\2\0"+
    "\3\5\1\0\2\5\1\u011f\30\5\32\0\7\5\1\0"+
    "\7\5\2\0\3\5\1\0\4\5\1\u0120\26\5\32\0"+
    "\7\5\1\0\7\5\2\0\3\5\1\0\5\5\1\u0121"+
    "\25\5\32\0\7\5\1\0\7\5\2\0\3\5\1\0"+
    "\22\5\1\u0122\10\5\32\0\7\5\1\0\7\5\2\0"+
    "\3\5\1\0\10\5\1\u0123\22\5\32\0\7\5\1\0"+
    "\1\5\1\u0124\5\5\2\0\3\5\1\0\33\5\32\0"+
    "\7\5\1\0\7\5\2\0\2\5\1\u0125\1\0\33\5"+
    "\32\0\7\5\1\0\7\5\2\0\3\5\1\0\7\5"+
    "\1\u0126\23\5\32\0\7\5\1\0\7\5\2\0\3\5"+
    "\1\0\1\5\1\u0127\31\5\32\0\7\5\1\0\7\5"+
    "\2\0\3\5\1\0\4\5\1\u0128\26\5\32\0\7\5"+
    "\1\0\7\5\2\0\3\5\1\0\22\5\1\u0129\10\5"+
    "\32\0\7\5\1\0\7\5\2\0\3\5\1\0\22\5"+
    "\1\u012a\10\5\32\0\7\5\1\0\7\5\2\0\3\5"+
    "\1\0\4\5\1\u012b\26\5\32\0\7\5\1\0\7\5"+
    "\2\0\1\u012c\2\5\1\0\33\5\32\0\7\5\1\0"+
    "\7\5\2\0\3\5\1\0\1\5\1\u012d\31\5\32\0"+
    "\7\5\1\0\3\5\1\u012e\3\5\2\0\3\5\1\0"+
    "\33\5\32\0\7\5\1\0\7\5\2\0\3\5\1\0"+
    "\20\5\1\u012f\12\5\32\0\7\5\1\0\7\5\2\0"+
    "\3\5\1\0\10\5\1\u0130\22\5\32\0\7\5\1\0"+
    "\7\5\2\0\3\5\1\0\3\5\1\u0131\27\5\32\0"+
    "\7\5\1\0\7\5\2\0\3\5\1\0\10\5\1\u0132"+
    "\22\5\32\0\7\5\1\0\7\5\2\0\3\5\1\0"+
    "\7\5\1\u0133\23\5\32\0\7\5\1\0\7\5\2\0"+
    "\3\5\1\0\5\5\1\u0134\25\5\32\0\7\5\1\0"+
    "\7\5\2\0\3\5\1\0\1\5\1\u0135\31\5\32\0"+
    "\7\5\1\0\7\5\2\0\3\5\1\0\4\5\1\u0136"+
    "\26\5\32\0\7\5\1\0\3\5\1\u0137\3\5\2\0"+
    "\3\5\1\0\33\5\32\0\7\5\1\0\7\5\2\0"+
    "\3\5\1\0\2\5\1\u0138\30\5\31\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[17316];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\10\1\1\11\33\1\4\11\1\1\5\11"+
    "\1\1\3\0\4\1\3\11\3\1\1\0\40\1\3\0"+
    "\1\1\3\11\1\1\13\11\1\1\1\0\1\1\1\0"+
    "\1\1\1\11\2\1\1\11\51\1\1\11\1\0\3\11"+
    "\1\0\216\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[312];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
  public String lexeme;

  private int yywrap() {       /* called at end of input */
      return 1;           /* terminate now */
  }


  private Token check_type() {
	  return IDENTIFIER;
  }



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 224) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { /* discard bad characters */
            }
          case 98: break;
          case 2: 
            { lexeme = yytext(); return I_CONSTANT;
            }
          case 99: break;
          case 3: 
            { lexeme = yytext(); return check_type();
            }
          case 100: break;
          case 4: 
            { lexeme = yytext(); return HYPHEN;
            }
          case 101: break;
          case 5: 
            { lexeme = yytext(); return QUESTION_MARK;
            }
          case 102: break;
          case 6: 
            { /* whitespace separates tokens */
            }
          case 103: break;
          case 7: 
            { lexeme = yytext(); return DOT;
            }
          case 104: break;
          case 8: 
            { lexeme = yytext(); return GREATER_THAN_OP;
            }
          case 105: break;
          case 9: 
            { lexeme = yytext(); return EQUALS;
            }
          case 106: break;
          case 10: 
            { lexeme = yytext(); return LESS_THAN_OP;
            }
          case 107: break;
          case 11: 
            { lexeme = yytext(); return PLUS;
            }
          case 108: break;
          case 12: 
            { lexeme = yytext(); return TIMES;
            }
          case 109: break;
          case 13: 
            { lexeme = yytext(); return DIVISON;
            }
          case 110: break;
          case 14: 
            { lexeme = yytext(); return MOD;
            }
          case 111: break;
          case 15: 
            { lexeme = yytext(); return AMPERSAND;
            }
          case 112: break;
          case 16: 
            { lexeme = yytext(); return POWER;
            }
          case 113: break;
          case 17: 
            { lexeme = yytext(); return BAR;
            }
          case 114: break;
          case 18: 
            { lexeme = yytext(); return EXCLAMATION;
            }
          case 115: break;
          case 19: 
            { lexeme = yytext(); return SEMI;
            }
          case 116: break;
          case 20: 
            { lexeme = yytext(); return LEFT_KEY;
            }
          case 117: break;
          case 21: 
            { lexeme = yytext(); return RIGHT_KEY;
            }
          case 118: break;
          case 22: 
            { lexeme = yytext(); return COMMA;
            }
          case 119: break;
          case 23: 
            { lexeme = yytext(); return COLON;
            }
          case 120: break;
          case 24: 
            { lexeme = yytext(); return LEFT_PARENTHESES;
            }
          case 121: break;
          case 25: 
            { lexeme = yytext(); return RIGHT_PARENTESES;
            }
          case 122: break;
          case 26: 
            { lexeme = yytext(); return LEFT_BRACKETS;
            }
          case 123: break;
          case 27: 
            { lexeme = yytext(); return RIGHT_BRACKETS;
            }
          case 124: break;
          case 28: 
            { lexeme = yytext(); return TILDE;
            }
          case 125: break;
          case 29: 
            { lexeme = yytext();  return F_CONSTANT;
            }
          case 126: break;
          case 30: 
            { lexeme = yytext(); return DEC_OP;
            }
          case 127: break;
          case 31: 
            { lexeme = yytext(); return PTR_OP;
            }
          case 128: break;
          case 32: 
            { lexeme = yytext(); return SUB_ASSIGN;
            }
          case 129: break;
          case 33: 
            { lexeme = yytext(); return IF;
            }
          case 130: break;
          case 34: 
            { lexeme = yytext(); return DO;
            }
          case 131: break;
          case 35: 
            { lexeme = yytext(); return RIGHT_OP;
            }
          case 132: break;
          case 36: 
            { lexeme = yytext(); return GE_OP;
            }
          case 133: break;
          case 37: 
            { lexeme = yytext(); return EQ_OP;
            }
          case 134: break;
          case 38: 
            { lexeme = yytext(); return LE_OP;
            }
          case 135: break;
          case 39: 
            { lexeme = yytext(); return LEFT_OP;
            }
          case 136: break;
          case 40: 
            { lexeme = yytext(); return ADD_ASSIGN;
            }
          case 137: break;
          case 41: 
            { lexeme = yytext(); return INC_OP;
            }
          case 138: break;
          case 42: 
            { lexeme = yytext(); return MUL_ASSIGN;
            }
          case 139: break;
          case 43: 
            { lexeme = yytext(); return DIV_ASSIGN;
            }
          case 140: break;
          case 44: 
            { lexeme = yytext(); return MOD_ASSIGN;
            }
          case 141: break;
          case 45: 
            { lexeme = yytext(); return AND_ASSIGN;
            }
          case 142: break;
          case 46: 
            { lexeme = yytext(); return AND_OP;
            }
          case 143: break;
          case 47: 
            { lexeme = yytext(); return XOR_ASSIGN;
            }
          case 144: break;
          case 48: 
            { lexeme = yytext(); return OR_ASSIGN;
            }
          case 145: break;
          case 49: 
            { lexeme = yytext(); return OR_OP;
            }
          case 146: break;
          case 50: 
            { lexeme = yytext(); return NE_OP;
            }
          case 147: break;
          case 51: 
            { lexeme = yytext(); return FOR;
            }
          case 148: break;
          case 52: 
            { lexeme = yytext(); return INT;
            }
          case 149: break;
          case 53: 
            { lexeme = yytext();  return I_CONSTANT;
            }
          case 150: break;
          case 54: 
            { lexeme = yytext(); return ELLIPSIS;
            }
          case 151: break;
          case 55: 
            { lexeme = yytext(); return RIGHT_ASSIGN;
            }
          case 152: break;
          case 56: 
            { lexeme = yytext(); return LEFT_ASSIGN;
            }
          case 153: break;
          case 57: 
            { lexeme = yytext(); return LONG;
            }
          case 154: break;
          case 58: 
            { lexeme = yytext(); return VOID;
            }
          case 155: break;
          case 59: 
            { lexeme = yytext(); return AUTO;
            }
          case 156: break;
          case 60: 
            { lexeme = yytext(); return ELSE;
            }
          case 157: break;
          case 61: 
            { lexeme = yytext(); return ENUM;
            }
          case 158: break;
          case 62: 
            { lexeme = yytext(); return CASE;
            }
          case 159: break;
          case 63: 
            { lexeme = yytext(); return CHAR;
            }
          case 160: break;
          case 64: 
            { lexeme = yytext(); return GOTO;
            }
          case 161: break;
          case 65: 
            { lexeme = yytext(); return FLOAT;
            }
          case 162: break;
          case 66: 
            { lexeme = yytext(); return UNION;
            }
          case 163: break;
          case 67: 
            { lexeme = yytext(); return BREAK;
            }
          case 164: break;
          case 68: 
            { lexeme = yytext(); return CONST;
            }
          case 165: break;
          case 69: 
            { lexeme = yytext(); return SHORT;
            }
          case 166: break;
          case 70: 
            { lexeme = yytext(); return WHILE;
            }
          case 167: break;
          case 71: 
            { lexeme = yytext(); return BOOL;
            }
          case 168: break;
          case 72: 
            { lexeme = yytext(); return RETURN;
            }
          case 169: break;
          case 73: 
            { lexeme = yytext(); return EXTERN;
            }
          case 170: break;
          case 74: 
            { lexeme = yytext(); return STATIC;
            }
          case 171: break;
          case 75: 
            { lexeme = yytext(); return STRUCT;
            }
          case 172: break;
          case 76: 
            { lexeme = yytext(); return SIGNED;
            }
          case 173: break;
          case 77: 
            { lexeme = yytext(); return SIZEOF;
            }
          case 174: break;
          case 78: 
            { lexeme = yytext(); return SWITCH;
            }
          case 175: break;
          case 79: 
            { lexeme = yytext(); return INLINE;
            }
          case 176: break;
          case 80: 
            { lexeme = yytext(); return DOUBLE;
            }
          case 177: break;
          case 81: 
            { lexeme = yytext(); return TYPEDEF;
            }
          case 178: break;
          case 82: 
            { lexeme = yytext(); return DEFAULT;
            }
          case 179: break;
          case 83: 
            { lexeme = yytext(); return ATOMIC;
            }
          case 180: break;
          case 84: 
            { lexeme = yytext(); return UNSIGNED;
            }
          case 181: break;
          case 85: 
            { lexeme = yytext(); return VOLATILE;
            }
          case 182: break;
          case 86: 
            { lexeme = yytext(); return RESTRICT;
            }
          case 183: break;
          case 87: 
            { lexeme = yytext(); return REGISTER;
            }
          case 184: break;
          case 88: 
            { lexeme = yytext(); return CONTINUE;
            }
          case 185: break;
          case 89: 
            { lexeme = yytext(); return FUNC_NAME;
            }
          case 186: break;
          case 90: 
            { lexeme = yytext(); return ALIGNAS;
            }
          case 187: break;
          case 91: 
            { lexeme = yytext(); return ALIGNOF;
            }
          case 188: break;
          case 92: 
            { lexeme = yytext(); return COMPLEX;
            }
          case 189: break;
          case 93: 
            { lexeme = yytext(); return GENERIC;
            }
          case 190: break;
          case 94: 
            { lexeme = yytext(); return NORETURN;
            }
          case 191: break;
          case 95: 
            { lexeme = yytext(); return IMAGINARY;
            }
          case 192: break;
          case 96: 
            { lexeme = yytext(); return THREAD_LOCAL;
            }
          case 193: break;
          case 97: 
            { lexeme = yytext(); return STATIC_ASSERT;
            }
          case 194: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
