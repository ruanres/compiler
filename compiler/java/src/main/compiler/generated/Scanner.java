/* The following code was generated by JFlex 1.6.1 */

package compiler.generated;
/* Reference: http://www.quut.com/c/ANSI-C-grammar-l.html */
import java_cup.runtime.*;
import util.Symbol;



/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>C:/Users/Rafael Albuquerque/Documents/workspace/compiler/compiler/spec/Scanner.flex</tt>
 */
public class Scanner implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\26\1\31\1\114\1\26\1\30\22\0\1\26\1\101\1\70"+
    "\2\0\1\75\1\76\1\66\1\102\1\103\1\33\1\74\1\112\1\10"+
    "\1\67\1\32\1\1\7\3\1\20\1\2\1\107\1\111\1\73\1\72"+
    "\1\71\1\22\1\0\1\56\1\57\1\60\1\5\1\7\1\13\1\61"+
    "\1\4\1\62\2\4\1\15\1\4\1\63\1\4\1\11\2\4\1\64"+
    "\1\65\1\17\2\4\1\6\2\4\1\106\1\21\1\110\1\77\1\55"+
    "\1\0\1\34\1\24\1\42\1\46\1\40\1\12\1\50\1\44\1\45"+
    "\1\4\1\41\1\14\1\47\1\23\1\36\1\54\1\4\1\37\1\43"+
    "\1\35\1\16\1\27\1\52\1\25\1\53\1\51\1\104\1\100\1\105"+
    "\1\113\6\0\1\114\u1fa2\0\1\114\1\114\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\2\2\1\3\1\4\4\3\1\5\1\3"+
    "\1\6\1\3\1\7\1\10\13\3\1\1\1\11\1\1"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31"+
    "\1\32\1\33\1\34\1\2\3\0\3\2\1\35\1\36"+
    "\1\37\1\40\3\3\2\0\5\3\1\41\1\0\1\42"+
    "\1\43\15\3\1\44\1\3\1\45\14\3\4\0\1\46"+
    "\1\47\1\50\1\51\1\52\1\53\1\54\1\55\1\56"+
    "\1\57\1\60\1\61\1\62\1\63\1\64\1\2\1\0"+
    "\1\35\1\0\4\2\1\35\1\3\1\65\6\3\2\41"+
    "\2\0\22\3\1\66\16\3\1\0\1\67\3\0\1\70"+
    "\1\71\1\0\1\3\1\72\4\3\1\73\1\0\1\74"+
    "\4\3\1\75\1\76\1\3\1\77\2\3\1\100\11\3"+
    "\1\101\13\3\1\102\1\3\1\103\1\104\7\3\1\105"+
    "\2\3\1\106\6\3\1\107\3\3\1\110\11\3\1\111"+
    "\2\3\1\112\1\3\1\113\1\114\1\115\1\116\1\117"+
    "\1\120\1\121\14\3\1\122\3\3\1\123\3\3\1\124"+
    "\6\3\1\125\1\126\1\127\1\130\1\131\1\132\1\133"+
    "\1\134\1\135\1\136\5\3\1\137\2\3\1\140\7\3"+
    "\1\141\1\142";

  private static int [] zzUnpackAction() {
    int [] result = new int[326];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\115\0\232\0\347\0\u0134\0\u0181\0\u01ce\0\u021b"+
    "\0\u0268\0\u02b5\0\115\0\u0302\0\u034f\0\u039c\0\u03e9\0\u0436"+
    "\0\u0483\0\u04d0\0\u051d\0\u056a\0\u05b7\0\u0604\0\u0651\0\u069e"+
    "\0\u06eb\0\u0738\0\u0785\0\u07d2\0\u081f\0\u086c\0\u08b9\0\u0906"+
    "\0\u0953\0\u09a0\0\u09ed\0\u0a3a\0\u0a87\0\u0ad4\0\u0b21\0\115"+
    "\0\115\0\115\0\115\0\115\0\u0b6e\0\115\0\115\0\115"+
    "\0\115\0\u0bbb\0\u0c08\0\u0c55\0\u0ca2\0\u0cef\0\u0d3c\0\u0d89"+
    "\0\u0dd6\0\115\0\115\0\115\0\u0e23\0\u0e70\0\u0ebd\0\u07d2"+
    "\0\u086c\0\u0f0a\0\u0f57\0\u0fa4\0\u0ff1\0\u103e\0\u108b\0\u10d8"+
    "\0\115\0\115\0\u1125\0\u1172\0\u11bf\0\u120c\0\u1259\0\u12a6"+
    "\0\u12f3\0\u1340\0\u138d\0\u13da\0\u1427\0\u1474\0\u14c1\0\u0134"+
    "\0\u150e\0\u155b\0\u15a8\0\u15f5\0\u1642\0\u168f\0\u16dc\0\u1729"+
    "\0\u1776\0\u17c3\0\u1810\0\u185d\0\u18aa\0\u18f7\0\u1944\0\u1991"+
    "\0\u19de\0\u1a2b\0\u1a78\0\u1ac5\0\115\0\115\0\115\0\u1b12"+
    "\0\115\0\115\0\115\0\115\0\115\0\115\0\115\0\115"+
    "\0\115\0\u1b5f\0\u1bac\0\u1bf9\0\u1c46\0\u1c93\0\115\0\u1ce0"+
    "\0\u1d2d\0\115\0\u1d7a\0\u0134\0\u1dc7\0\u1e14\0\u1e61\0\u1eae"+
    "\0\u1efb\0\u1f48\0\u1f95\0\115\0\u1fe2\0\u202f\0\u207c\0\u20c9"+
    "\0\u2116\0\u2163\0\u21b0\0\u21fd\0\u224a\0\u2297\0\u22e4\0\u2331"+
    "\0\u237e\0\u23cb\0\u2418\0\u2465\0\u24b2\0\u24ff\0\u254c\0\u2599"+
    "\0\u0134\0\u25e6\0\u2633\0\u2680\0\u26cd\0\u271a\0\u2767\0\u27b4"+
    "\0\u2801\0\u284e\0\u289b\0\u28e8\0\u2935\0\u2982\0\u29cf\0\u2a1c"+
    "\0\115\0\u2a69\0\u2ab6\0\u2b03\0\115\0\115\0\u2b50\0\u2b9d"+
    "\0\u0134\0\u2bea\0\u2c37\0\u2c84\0\u2cd1\0\u0134\0\u2d1e\0\u0134"+
    "\0\u2d6b\0\u2db8\0\u2e05\0\u2e52\0\u0134\0\u0134\0\u2e9f\0\u0134"+
    "\0\u2eec\0\u2f39\0\u0134\0\u2f86\0\u2fd3\0\u3020\0\u306d\0\u30ba"+
    "\0\u3107\0\u3154\0\u31a1\0\u31ee\0\u0134\0\u323b\0\u3288\0\u32d5"+
    "\0\u3322\0\u336f\0\u33bc\0\u3409\0\u3456\0\u34a3\0\u34f0\0\u353d"+
    "\0\u0134\0\u358a\0\u0134\0\u0134\0\u35d7\0\u3624\0\u3671\0\u36be"+
    "\0\u370b\0\u3758\0\u37a5\0\u0134\0\u37f2\0\u383f\0\u0134\0\u388c"+
    "\0\u38d9\0\u3926\0\u3973\0\u39c0\0\u3a0d\0\u0134\0\u3a5a\0\u3aa7"+
    "\0\u3af4\0\u0134\0\u3b41\0\u3b8e\0\u3bdb\0\u3c28\0\u3c75\0\u3cc2"+
    "\0\u3d0f\0\u3d5c\0\u3da9\0\u0134\0\u3df6\0\u3e43\0\u0134\0\u3e90"+
    "\0\u0134\0\u0134\0\u0134\0\u0134\0\u0134\0\u0134\0\u0134\0\u3edd"+
    "\0\u3f2a\0\u3f77\0\u3fc4\0\u4011\0\u405e\0\u40ab\0\u40f8\0\u4145"+
    "\0\u4192\0\u41df\0\u422c\0\u0134\0\u4279\0\u42c6\0\u4313\0\u0134"+
    "\0\u4360\0\u43ad\0\u43fa\0\u0134\0\u4447\0\u4494\0\u44e1\0\u452e"+
    "\0\u457b\0\u45c8\0\u0134\0\u0134\0\u0134\0\u0134\0\u0134\0\u0134"+
    "\0\u0134\0\u0134\0\u0134\0\u0134\0\u4615\0\u4662\0\u46af\0\u46fc"+
    "\0\u4749\0\u0134\0\u4796\0\u47e3\0\u0134\0\u4830\0\u487d\0\u48ca"+
    "\0\u4917\0\u4964\0\u49b1\0\u49fe\0\u0134\0\u0134";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[326];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\2\4\4\5\1\6\1\5\1\7\1\5"+
    "\1\10\1\11\1\12\1\11\1\4\1\2\1\13\1\5"+
    "\1\14\1\5\1\15\1\16\1\0\1\15\1\17\1\20"+
    "\1\21\1\22\1\5\1\23\1\24\1\5\1\25\1\26"+
    "\1\5\1\27\1\30\1\5\1\31\1\5\1\32\2\5"+
    "\1\33\10\5\1\34\1\35\1\36\1\37\1\40\1\41"+
    "\1\42\1\43\1\44\1\45\1\46\1\47\1\50\1\51"+
    "\1\52\1\53\1\54\1\55\1\56\1\57\1\60\1\61"+
    "\117\0\1\62\1\63\1\62\2\0\1\64\1\65\4\0"+
    "\1\66\1\67\2\70\1\63\4\0\1\64\12\0\1\65"+
    "\26\0\1\71\26\0\3\4\3\0\1\65\4\0\1\66"+
    "\1\67\2\70\1\4\17\0\1\65\26\0\1\71\26\0"+
    "\7\5\1\0\10\5\2\0\3\5\1\0\1\5\4\0"+
    "\32\5\37\0\1\72\60\0\1\73\1\74\23\0\7\5"+
    "\1\0\3\5\1\75\4\5\2\0\3\5\1\0\1\5"+
    "\4\0\2\5\1\76\27\5\30\0\7\5\1\0\10\5"+
    "\2\0\3\5\1\0\1\5\4\0\2\5\1\77\27\5"+
    "\30\0\7\5\1\0\10\5\2\0\3\5\1\0\1\5"+
    "\4\0\32\5\1\100\1\0\1\101\25\0\7\5\1\0"+
    "\7\5\1\102\2\0\1\103\2\5\1\0\1\5\4\0"+
    "\32\5\1\100\1\0\1\101\25\0\7\5\1\0\10\5"+
    "\2\0\3\5\1\0\1\5\4\0\3\5\1\104\26\5"+
    "\55\0\2\15\1\0\1\15\64\0\7\5\1\0\10\5"+
    "\2\0\3\5\1\15\1\105\1\0\1\15\2\0\2\5"+
    "\1\106\27\5\61\0\1\107\1\110\36\0\1\111\114\0"+
    "\1\112\23\0\7\5\1\0\5\5\1\113\2\5\2\0"+
    "\3\5\1\0\1\5\4\0\32\5\30\0\7\5\1\0"+
    "\10\5\2\0\3\5\1\0\1\5\4\0\17\5\1\114"+
    "\12\5\30\0\7\5\1\0\10\5\2\0\3\5\1\0"+
    "\1\5\4\0\4\5\1\115\25\5\30\0\7\5\1\0"+
    "\3\5\1\116\4\5\2\0\1\117\1\5\1\120\1\0"+
    "\1\5\4\0\32\5\30\0\7\5\1\0\10\5\2\0"+
    "\3\5\1\0\1\5\4\0\1\121\1\5\1\122\5\5"+
    "\1\123\21\5\30\0\7\5\1\0\10\5\2\0\3\5"+
    "\1\0\1\5\4\0\1\5\1\124\6\5\1\125\1\126"+
    "\4\5\1\127\13\5\30\0\7\5\1\0\1\5\1\130"+
    "\6\5\2\0\1\131\2\5\1\0\1\5\4\0\32\5"+
    "\30\0\7\5\1\0\10\5\2\0\3\5\1\0\1\5"+
    "\4\0\2\5\1\132\1\5\1\133\25\5\30\0\7\5"+
    "\1\0\10\5\2\0\3\5\1\0\1\5\4\0\2\5"+
    "\1\134\27\5\30\0\7\5\1\0\10\5\2\0\3\5"+
    "\1\0\1\5\4\0\10\5\1\135\21\5\30\0\7\5"+
    "\1\0\10\5\2\0\3\5\1\0\1\5\4\0\21\5"+
    "\1\136\1\137\1\140\1\141\1\142\1\143\1\144\1\145"+
    "\1\146\27\0\21\147\1\150\7\147\1\0\34\147\1\0"+
    "\26\147\1\0\3\71\14\0\1\71\46\0\1\151\25\0"+
    "\21\101\1\152\7\101\1\0\36\101\1\153\24\101\71\0"+
    "\1\154\1\155\114\0\1\156\114\0\1\157\1\160\1\0"+
    "\1\52\11\0\1\54\77\0\1\161\1\0\1\162\111\0"+
    "\1\53\1\163\114\0\1\164\3\0\1\165\110\0\1\166"+
    "\114\0\1\167\5\0\1\170\106\0\1\171\113\0\1\56"+
    "\24\0\1\62\1\63\1\62\3\0\1\65\4\0\1\66"+
    "\1\67\2\70\1\63\17\0\1\65\26\0\1\71\26\0"+
    "\3\63\3\0\1\65\10\0\1\63\17\0\1\65\26\0"+
    "\1\71\26\0\3\172\1\0\1\172\1\0\1\172\2\0"+
    "\2\172\4\0\1\172\3\0\1\172\7\0\1\172\3\0"+
    "\1\172\1\0\1\172\3\0\1\172\7\0\3\172\6\0"+
    "\1\173\26\0\3\174\4\0\1\175\7\0\1\174\53\0"+
    "\1\175\34\0\1\176\1\0\2\177\112\0\1\176\2\177"+
    "\111\0\1\200\1\201\100\0\3\71\3\0\1\65\2\0"+
    "\4\202\2\0\1\71\17\0\1\65\55\0\7\5\1\0"+
    "\10\5\2\0\3\5\1\0\1\5\4\0\2\5\1\203"+
    "\27\5\30\0\7\5\1\0\10\5\2\0\3\5\1\0"+
    "\1\5\4\0\3\5\1\204\26\5\30\0\7\5\1\0"+
    "\10\5\2\0\1\205\2\5\1\0\1\5\4\0\32\5"+
    "\30\0\7\5\1\0\10\5\2\0\3\5\1\0\1\5"+
    "\4\0\32\5\2\0\1\101\25\0\7\5\1\0\10\5"+
    "\2\0\3\5\1\0\1\5\4\0\7\5\1\206\1\5"+
    "\1\207\20\5\30\0\7\5\1\0\10\5\2\0\3\5"+
    "\1\0\1\5\4\0\4\5\1\210\25\5\30\0\7\5"+
    "\1\0\10\5\2\0\3\5\1\15\1\105\1\0\1\15"+
    "\2\0\32\5\30\0\7\5\1\0\3\5\1\211\4\5"+
    "\2\0\3\5\1\0\1\5\4\0\11\5\1\212\20\5"+
    "\27\0\30\107\1\213\1\214\63\107\33\215\1\216\61\215"+
    "\1\0\7\5\1\0\10\5\2\0\3\5\1\0\1\5"+
    "\4\0\1\5\1\217\30\5\30\0\7\5\1\0\10\5"+
    "\2\0\3\5\1\0\1\5\4\0\20\5\1\220\11\5"+
    "\30\0\7\5\1\0\10\5\2\0\3\5\1\0\1\5"+
    "\4\0\1\5\1\221\5\5\1\222\4\5\1\223\15\5"+
    "\30\0\7\5\1\0\10\5\2\0\3\5\1\0\1\5"+
    "\4\0\7\5\1\224\22\5\30\0\7\5\1\0\5\5"+
    "\1\225\2\5\2\0\3\5\1\0\1\5\4\0\32\5"+
    "\30\0\7\5\1\0\10\5\2\0\3\5\1\0\1\5"+
    "\4\0\1\5\1\226\30\5\30\0\7\5\1\0\10\5"+
    "\2\0\3\5\1\0\1\5\4\0\7\5\1\227\22\5"+
    "\30\0\7\5\1\0\10\5\2\0\1\230\2\5\1\0"+
    "\1\5\4\0\32\5\30\0\7\5\1\0\10\5\2\0"+
    "\3\5\1\0\1\5\4\0\1\231\31\5\30\0\7\5"+
    "\1\0\10\5\2\0\3\5\1\0\1\5\4\0\1\232"+
    "\2\5\1\233\26\5\30\0\7\5\1\0\10\5\2\0"+
    "\3\5\1\0\1\5\4\0\2\5\1\234\27\5\30\0"+
    "\7\5\1\0\10\5\2\0\3\5\1\0\1\5\4\0"+
    "\14\5\1\235\1\236\14\5\30\0\7\5\1\0\10\5"+
    "\2\0\3\5\1\0\1\5\4\0\11\5\1\237\20\5"+
    "\30\0\7\5\1\0\3\5\1\240\4\5\2\0\3\5"+
    "\1\0\1\5\4\0\1\5\1\241\30\5\30\0\7\5"+
    "\1\0\5\5\1\242\2\5\2\0\3\5\1\0\1\5"+
    "\4\0\32\5\30\0\7\5\1\0\1\5\1\243\6\5"+
    "\2\0\3\5\1\0\1\5\4\0\32\5\30\0\7\5"+
    "\1\0\10\5\2\0\3\5\1\0\1\5\4\0\1\5"+
    "\1\244\30\5\30\0\7\5\1\0\10\5\2\0\3\5"+
    "\1\0\1\5\4\0\11\5\1\245\20\5\30\0\7\5"+
    "\1\0\1\5\1\246\6\5\2\0\3\5\1\0\1\5"+
    "\4\0\32\5\30\0\7\5\1\0\3\5\1\247\4\5"+
    "\2\0\3\5\1\0\1\5\4\0\1\5\1\250\30\5"+
    "\30\0\7\5\1\0\10\5\2\0\3\5\1\0\1\5"+
    "\4\0\2\5\1\251\27\5\30\0\7\5\1\0\10\5"+
    "\2\0\3\5\1\0\1\5\4\0\2\5\1\252\27\5"+
    "\30\0\7\5\1\0\10\5\2\0\3\5\1\0\1\5"+
    "\4\0\4\5\1\253\25\5\30\0\7\5\1\0\10\5"+
    "\2\0\3\5\1\0\1\5\4\0\13\5\1\254\16\5"+
    "\30\0\7\5\1\0\10\5\2\0\3\5\1\0\1\5"+
    "\4\0\2\5\1\255\27\5\30\0\7\5\1\0\10\5"+
    "\2\0\3\5\1\0\1\5\4\0\1\5\1\256\30\5"+
    "\30\0\7\5\1\0\10\5\2\0\3\5\1\0\1\5"+
    "\4\0\10\5\1\257\21\5\27\0\21\147\1\150\7\147"+
    "\1\0\34\147\1\177\26\147\1\0\1\147\1\0\1\147"+
    "\6\0\1\147\6\0\4\147\1\260\1\0\1\147\4\0"+
    "\2\147\1\0\1\147\26\0\1\147\115\0\1\261\26\0"+
    "\1\101\1\0\1\101\6\0\1\101\6\0\4\101\1\262"+
    "\1\0\1\101\4\0\2\101\1\0\1\101\26\0\1\101"+
    "\43\0\1\263\1\264\1\263\6\0\2\153\1\0\1\153"+
    "\36\0\1\101\116\0\1\265\114\0\1\266\23\0\3\172"+
    "\1\0\1\172\1\0\1\172\1\0\1\65\2\172\1\66"+
    "\1\67\2\70\1\172\3\0\1\172\7\0\1\172\3\0"+
    "\1\172\1\0\1\172\3\0\1\172\5\0\1\65\1\0"+
    "\3\172\6\0\1\267\26\0\3\267\1\0\1\267\1\0"+
    "\1\267\2\0\2\267\4\0\1\267\3\0\1\267\7\0"+
    "\1\267\3\0\1\267\1\0\1\267\3\0\1\267\7\0"+
    "\3\267\35\0\3\174\6\0\4\202\2\0\1\174\75\0"+
    "\3\174\14\0\1\174\112\0\2\177\111\0\1\177\115\0"+
    "\1\177\100\0\7\5\1\0\10\5\2\0\3\5\1\0"+
    "\1\5\4\0\1\270\31\5\30\0\7\5\1\0\10\5"+
    "\2\0\3\5\1\0\1\5\4\0\14\5\1\271\15\5"+
    "\30\0\7\5\1\0\10\5\2\0\3\5\1\0\1\5"+
    "\4\0\11\5\1\272\20\5\30\0\7\5\1\0\10\5"+
    "\2\0\3\5\1\0\1\5\4\0\2\5\1\273\27\5"+
    "\30\0\7\5\1\0\10\5\2\0\3\5\1\0\1\5"+
    "\4\0\1\274\31\5\30\0\7\5\1\0\10\5\2\0"+
    "\3\5\1\0\1\5\4\0\1\275\31\5\30\0\7\5"+
    "\1\0\10\5\2\0\3\5\1\0\1\5\4\0\12\5"+
    "\1\276\17\5\60\0\1\214\63\0\33\215\1\277\61\215"+
    "\32\0\1\214\1\216\62\0\7\5\1\0\10\5\2\0"+
    "\3\5\1\0\1\5\4\0\2\5\1\300\27\5\30\0"+
    "\7\5\1\0\10\5\2\0\3\5\1\0\1\5\4\0"+
    "\4\5\1\301\25\5\30\0\7\5\1\0\5\5\1\302"+
    "\2\5\2\0\3\5\1\0\1\5\4\0\32\5\30\0"+
    "\7\5\1\0\10\5\2\0\3\5\1\0\1\5\4\0"+
    "\1\5\1\303\30\5\30\0\7\5\1\0\10\5\2\0"+
    "\3\5\1\0\1\5\4\0\11\5\1\304\20\5\30\0"+
    "\7\5\1\0\10\5\2\0\3\5\1\0\1\5\4\0"+
    "\4\5\1\305\25\5\30\0\7\5\1\0\10\5\2\0"+
    "\3\5\1\0\1\5\4\0\13\5\1\306\16\5\30\0"+
    "\7\5\1\0\10\5\2\0\3\5\1\0\1\5\4\0"+
    "\4\5\1\307\25\5\30\0\7\5\1\0\10\5\2\0"+
    "\3\5\1\0\1\5\4\0\4\5\1\310\25\5\30\0"+
    "\7\5\1\0\10\5\2\0\3\5\1\0\1\5\4\0"+
    "\1\5\1\311\5\5\1\312\22\5\30\0\7\5\1\0"+
    "\10\5\2\0\3\5\1\0\1\5\4\0\3\5\1\313"+
    "\26\5\30\0\7\5\1\0\10\5\2\0\3\5\1\0"+
    "\1\5\4\0\1\5\1\314\30\5\30\0\7\5\1\0"+
    "\5\5\1\315\2\5\2\0\3\5\1\0\1\5\4\0"+
    "\32\5\30\0\7\5\1\0\10\5\2\0\3\5\1\0"+
    "\1\5\4\0\3\5\1\316\26\5\30\0\7\5\1\0"+
    "\10\5\2\0\1\317\2\5\1\0\1\5\4\0\32\5"+
    "\30\0\7\5\1\0\10\5\2\0\3\5\1\0\1\5"+
    "\4\0\4\5\1\320\25\5\30\0\7\5\1\0\10\5"+
    "\2\0\3\5\1\0\1\5\4\0\1\5\1\321\30\5"+
    "\30\0\7\5\1\0\10\5\2\0\3\5\1\0\1\5"+
    "\4\0\11\5\1\322\20\5\30\0\7\5\1\0\10\5"+
    "\2\0\1\5\1\323\1\5\1\0\1\5\4\0\32\5"+
    "\30\0\7\5\1\0\10\5\2\0\3\5\1\0\1\5"+
    "\4\0\1\324\31\5\30\0\7\5\1\0\10\5\2\0"+
    "\3\5\1\0\1\5\4\0\2\5\1\325\27\5\30\0"+
    "\7\5\1\0\3\5\1\326\4\5\2\0\3\5\1\0"+
    "\1\5\4\0\32\5\30\0\7\5\1\0\5\5\1\327"+
    "\2\5\2\0\3\5\1\0\1\5\4\0\32\5\30\0"+
    "\7\5\1\0\10\5\2\0\3\5\1\0\1\5\4\0"+
    "\11\5\1\330\20\5\30\0\7\5\1\0\10\5\2\0"+
    "\3\5\1\0\1\5\4\0\2\5\1\331\27\5\30\0"+
    "\7\5\1\0\10\5\2\0\3\5\1\0\1\5\4\0"+
    "\2\5\1\332\27\5\30\0\7\5\1\0\10\5\2\0"+
    "\3\5\1\0\1\5\4\0\13\5\1\333\16\5\30\0"+
    "\7\5\1\0\10\5\2\0\1\334\2\5\1\0\1\5"+
    "\4\0\32\5\30\0\7\5\1\0\10\5\2\0\3\5"+
    "\1\0\1\5\4\0\1\335\31\5\30\0\7\5\1\0"+
    "\10\5\2\0\3\5\1\0\1\5\4\0\3\5\1\336"+
    "\26\5\30\0\7\5\1\0\10\5\2\0\3\5\1\0"+
    "\1\5\4\0\1\337\31\5\30\0\7\5\1\0\10\5"+
    "\2\0\3\5\1\0\1\5\4\0\3\5\1\340\26\5"+
    "\30\0\3\147\1\0\1\147\1\0\1\147\2\0\2\147"+
    "\4\0\1\147\3\0\1\147\7\0\1\147\3\0\1\147"+
    "\1\0\1\147\3\0\1\147\7\0\3\147\35\0\3\101"+
    "\1\0\1\101\1\0\1\101\2\0\2\101\4\0\1\101"+
    "\3\0\1\101\7\0\1\101\3\0\1\101\1\0\1\101"+
    "\3\0\1\101\7\0\3\101\124\0\1\101\44\0\1\263"+
    "\47\0\1\101\25\0\3\267\1\0\1\267\1\0\1\267"+
    "\1\0\1\65\2\267\4\0\1\267\3\0\1\267\7\0"+
    "\1\267\3\0\1\267\1\0\1\267\3\0\1\267\5\0"+
    "\1\65\1\0\3\267\35\0\7\5\1\0\10\5\2\0"+
    "\3\5\1\0\1\5\4\0\1\5\1\341\30\5\30\0"+
    "\7\5\1\0\10\5\2\0\3\5\1\0\1\5\4\0"+
    "\14\5\1\342\15\5\30\0\7\5\1\0\10\5\2\0"+
    "\1\343\2\5\1\0\1\5\4\0\32\5\30\0\7\5"+
    "\1\0\10\5\2\0\3\5\1\0\1\5\4\0\5\5"+
    "\1\344\24\5\30\0\7\5\1\0\10\5\2\0\3\5"+
    "\1\0\1\5\4\0\1\5\1\345\30\5\27\0\32\215"+
    "\1\214\1\277\61\215\1\0\7\5\1\0\10\5\2\0"+
    "\3\5\1\0\1\5\4\0\12\5\1\346\17\5\30\0"+
    "\7\5\1\0\10\5\2\0\3\5\1\0\1\5\4\0"+
    "\3\5\1\347\26\5\30\0\7\5\1\0\10\5\2\0"+
    "\3\5\1\0\1\5\4\0\3\5\1\350\26\5\30\0"+
    "\7\5\1\0\10\5\2\0\3\5\1\0\1\5\4\0"+
    "\7\5\1\351\22\5\30\0\7\5\1\0\10\5\2\0"+
    "\3\5\1\0\1\5\4\0\3\5\1\352\26\5\30\0"+
    "\7\5\1\0\10\5\2\0\3\5\1\0\1\5\4\0"+
    "\11\5\1\353\20\5\30\0\7\5\1\0\10\5\2\0"+
    "\3\5\1\0\1\5\4\0\1\5\1\354\30\5\30\0"+
    "\7\5\1\0\10\5\2\0\3\5\1\0\1\5\4\0"+
    "\11\5\1\355\20\5\30\0\7\5\1\0\10\5\2\0"+
    "\3\5\1\0\1\5\4\0\6\5\1\356\23\5\30\0"+
    "\7\5\1\0\10\5\2\0\3\5\1\0\1\5\4\0"+
    "\1\5\1\357\30\5\30\0\7\5\1\0\10\5\2\0"+
    "\3\5\1\0\1\5\4\0\4\5\1\360\25\5\30\0"+
    "\7\5\1\0\10\5\2\0\3\5\1\0\1\5\4\0"+
    "\2\5\1\361\27\5\30\0\7\5\1\0\10\5\2\0"+
    "\3\5\1\0\1\5\4\0\6\5\1\362\23\5\30\0"+
    "\7\5\1\0\10\5\2\0\1\363\2\5\1\0\1\5"+
    "\4\0\32\5\30\0\7\5\1\0\3\5\1\364\4\5"+
    "\2\0\3\5\1\0\1\5\4\0\32\5\30\0\7\5"+
    "\1\0\5\5\1\365\2\5\2\0\3\5\1\0\1\5"+
    "\4\0\32\5\30\0\7\5\1\0\10\5\2\0\3\5"+
    "\1\0\1\5\4\0\4\5\1\366\25\5\30\0\7\5"+
    "\1\0\10\5\2\0\1\367\2\5\1\0\1\5\4\0"+
    "\32\5\30\0\7\5\1\0\10\5\2\0\3\5\1\0"+
    "\1\5\4\0\14\5\1\370\15\5\30\0\7\5\1\0"+
    "\10\5\2\0\3\5\1\0\1\5\4\0\13\5\1\371"+
    "\16\5\30\0\7\5\1\0\3\5\1\372\4\5\2\0"+
    "\3\5\1\0\1\5\4\0\32\5\30\0\7\5\1\0"+
    "\10\5\2\0\3\5\1\0\1\5\4\0\20\5\1\373"+
    "\11\5\30\0\7\5\1\0\10\5\2\0\3\5\1\0"+
    "\1\5\4\0\4\5\1\374\25\5\30\0\7\5\1\0"+
    "\10\5\2\0\3\5\1\0\1\5\4\0\14\5\1\375"+
    "\15\5\30\0\7\5\1\0\10\5\2\0\3\5\1\0"+
    "\1\5\4\0\4\5\1\376\25\5\30\0\7\5\1\0"+
    "\10\5\2\0\3\5\1\0\1\5\4\0\1\5\1\377"+
    "\30\5\30\0\7\5\1\0\10\5\2\0\3\5\1\0"+
    "\1\5\4\0\4\5\1\u0100\25\5\30\0\7\5\1\0"+
    "\10\5\2\0\1\u0101\2\5\1\0\1\5\4\0\32\5"+
    "\30\0\7\5\1\0\10\5\2\0\3\5\1\0\1\5"+
    "\4\0\11\5\1\u0102\20\5\30\0\7\5\1\0\10\5"+
    "\2\0\3\5\1\0\1\5\4\0\4\5\1\u0103\25\5"+
    "\30\0\7\5\1\0\10\5\2\0\1\u0104\2\5\1\0"+
    "\1\5\4\0\32\5\30\0\7\5\1\0\10\5\2\0"+
    "\3\5\1\0\1\5\4\0\11\5\1\u0105\20\5\30\0"+
    "\7\5\1\0\10\5\2\0\3\5\1\0\1\5\4\0"+
    "\1\5\1\u0106\30\5\30\0\7\5\1\0\10\5\2\0"+
    "\1\u0107\2\5\1\0\1\5\4\0\32\5\30\0\7\5"+
    "\1\0\10\5\2\0\1\u0108\2\5\1\0\1\5\4\0"+
    "\32\5\30\0\7\5\1\0\10\5\2\0\3\5\1\0"+
    "\1\5\4\0\6\5\1\u0109\23\5\30\0\7\5\1\0"+
    "\10\5\2\0\3\5\1\0\1\5\4\0\1\5\1\u010a"+
    "\30\5\30\0\7\5\1\0\10\5\2\0\3\5\1\0"+
    "\1\5\4\0\12\5\1\u010b\17\5\30\0\7\5\1\0"+
    "\1\5\1\u010c\6\5\2\0\3\5\1\0\1\5\4\0"+
    "\32\5\30\0\7\5\1\0\10\5\2\0\3\5\1\0"+
    "\1\5\4\0\10\5\1\u010d\21\5\30\0\7\5\1\0"+
    "\10\5\2\0\3\5\1\0\1\5\4\0\4\5\1\u010e"+
    "\25\5\30\0\7\5\1\0\10\5\2\0\3\5\1\0"+
    "\1\5\4\0\4\5\1\u010f\25\5\30\0\7\5\1\0"+
    "\3\5\1\u0110\4\5\2\0\3\5\1\0\1\5\4\0"+
    "\32\5\30\0\7\5\1\0\10\5\2\0\3\5\1\0"+
    "\1\5\4\0\6\5\1\u0111\23\5\30\0\7\5\1\0"+
    "\10\5\2\0\1\u0112\2\5\1\0\1\5\4\0\32\5"+
    "\30\0\7\5\1\0\10\5\2\0\3\5\1\0\1\5"+
    "\4\0\11\5\1\u0113\20\5\30\0\7\5\1\0\3\5"+
    "\1\u0114\4\5\2\0\3\5\1\0\1\5\4\0\32\5"+
    "\30\0\7\5\1\0\10\5\2\0\3\5\1\0\1\5"+
    "\4\0\3\5\1\u0115\26\5\30\0\7\5\1\0\10\5"+
    "\2\0\3\5\1\0\1\5\4\0\11\5\1\u0116\20\5"+
    "\30\0\7\5\1\0\10\5\2\0\3\5\1\0\1\5"+
    "\4\0\1\5\1\u0117\30\5\30\0\7\5\1\0\10\5"+
    "\2\0\3\5\1\0\1\5\4\0\11\5\1\u0118\20\5"+
    "\30\0\7\5\1\0\10\5\2\0\3\5\1\0\1\5"+
    "\4\0\1\u0119\31\5\30\0\7\5\1\0\10\5\2\0"+
    "\3\5\1\0\1\5\4\0\4\5\1\u011a\25\5\30\0"+
    "\7\5\1\0\3\5\1\u011b\4\5\2\0\3\5\1\0"+
    "\1\5\4\0\32\5\30\0\7\5\1\0\1\5\1\u011c"+
    "\6\5\2\0\3\5\1\0\1\5\4\0\32\5\30\0"+
    "\7\5\1\0\10\5\2\0\3\5\1\0\1\5\4\0"+
    "\6\5\1\u011d\23\5\30\0\7\5\1\0\10\5\2\0"+
    "\3\5\1\0\1\5\4\0\4\5\1\u011e\25\5\30\0"+
    "\7\5\1\0\5\5\1\u011f\2\5\2\0\3\5\1\0"+
    "\1\5\4\0\32\5\30\0\7\5\1\0\10\5\2\0"+
    "\3\5\1\0\1\5\4\0\1\5\1\u0120\30\5\30\0"+
    "\7\5\1\0\10\5\2\0\3\5\1\0\1\5\4\0"+
    "\21\5\1\u0121\10\5\30\0\7\5\1\0\10\5\2\0"+
    "\3\5\1\0\1\5\4\0\1\u0122\1\5\1\u0123\27\5"+
    "\30\0\7\5\1\0\10\5\2\0\3\5\1\0\1\5"+
    "\4\0\6\5\1\u0124\23\5\30\0\7\5\1\0\10\5"+
    "\2\0\3\5\1\0\1\5\4\0\4\5\1\u0125\25\5"+
    "\30\0\7\5\1\0\10\5\2\0\3\5\1\0\1\5"+
    "\4\0\11\5\1\u0126\20\5\30\0\7\5\1\0\10\5"+
    "\2\0\1\u0127\2\5\1\0\1\5\4\0\32\5\30\0"+
    "\7\5\1\0\5\5\1\u0128\2\5\2\0\3\5\1\0"+
    "\1\5\4\0\32\5\30\0\7\5\1\0\10\5\2\0"+
    "\3\5\1\0\1\5\4\0\6\5\1\u0129\23\5\30\0"+
    "\7\5\1\0\10\5\2\0\3\5\1\0\1\5\4\0"+
    "\12\5\1\u012a\17\5\30\0\7\5\1\0\10\5\2\0"+
    "\3\5\1\0\1\5\4\0\12\5\1\u012b\17\5\30\0"+
    "\7\5\1\0\10\5\2\0\3\5\1\0\1\5\4\0"+
    "\4\5\1\u012c\25\5\30\0\7\5\1\0\10\5\2\0"+
    "\3\5\1\0\1\5\4\0\1\5\1\u012d\30\5\30\0"+
    "\7\5\1\0\10\5\2\0\3\5\1\0\1\5\4\0"+
    "\3\5\1\u012e\26\5\30\0\7\5\1\0\10\5\2\0"+
    "\3\5\1\0\1\5\4\0\4\5\1\u012f\25\5\30\0"+
    "\7\5\1\0\10\5\2\0\3\5\1\0\1\5\4\0"+
    "\21\5\1\u0130\10\5\30\0\7\5\1\0\10\5\2\0"+
    "\3\5\1\0\1\5\4\0\7\5\1\u0131\22\5\30\0"+
    "\7\5\1\0\1\5\1\u0132\6\5\2\0\3\5\1\0"+
    "\1\5\4\0\32\5\30\0\7\5\1\0\10\5\2\0"+
    "\2\5\1\u0133\1\0\1\5\4\0\32\5\30\0\7\5"+
    "\1\0\10\5\2\0\3\5\1\0\1\5\4\0\6\5"+
    "\1\u0134\23\5\30\0\7\5\1\0\10\5\2\0\3\5"+
    "\1\0\1\5\4\0\1\u0135\31\5\30\0\7\5\1\0"+
    "\10\5\2\0\3\5\1\0\1\5\4\0\3\5\1\u0136"+
    "\26\5\30\0\7\5\1\0\10\5\2\0\3\5\1\0"+
    "\1\5\4\0\21\5\1\u0137\10\5\30\0\7\5\1\0"+
    "\10\5\2\0\3\5\1\0\1\5\4\0\21\5\1\u0138"+
    "\10\5\30\0\7\5\1\0\10\5\2\0\3\5\1\0"+
    "\1\5\4\0\3\5\1\u0139\26\5\30\0\7\5\1\0"+
    "\10\5\2\0\1\u013a\2\5\1\0\1\5\4\0\32\5"+
    "\30\0\7\5\1\0\10\5\2\0\3\5\1\0\1\5"+
    "\4\0\1\u013b\31\5\30\0\7\5\1\0\3\5\1\u013c"+
    "\4\5\2\0\3\5\1\0\1\5\4\0\32\5\30\0"+
    "\7\5\1\0\10\5\2\0\3\5\1\0\1\5\4\0"+
    "\17\5\1\u013d\12\5\30\0\7\5\1\0\10\5\2\0"+
    "\3\5\1\0\1\5\4\0\7\5\1\u013e\22\5\30\0"+
    "\7\5\1\0\10\5\2\0\3\5\1\0\1\5\4\0"+
    "\2\5\1\u013f\27\5\30\0\7\5\1\0\10\5\2\0"+
    "\3\5\1\0\1\5\4\0\7\5\1\u0140\22\5\30\0"+
    "\7\5\1\0\10\5\2\0\3\5\1\0\1\5\4\0"+
    "\6\5\1\u0141\23\5\30\0\7\5\1\0\10\5\2\0"+
    "\3\5\1\0\1\5\4\0\4\5\1\u0142\25\5\30\0"+
    "\7\5\1\0\10\5\2\0\3\5\1\0\1\5\4\0"+
    "\1\u0143\31\5\30\0\7\5\1\0\10\5\2\0\3\5"+
    "\1\0\1\5\4\0\3\5\1\u0144\26\5\30\0\7\5"+
    "\1\0\3\5\1\u0145\4\5\2\0\3\5\1\0\1\5"+
    "\4\0\32\5\30\0\7\5\1\0\10\5\2\0\3\5"+
    "\1\0\1\5\4\0\1\5\1\u0146\30\5\27\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[19019];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\10\1\1\11\34\1\5\11\1\1\4\11"+
    "\1\1\3\0\4\1\3\11\3\1\2\0\6\1\1\0"+
    "\2\11\34\1\4\0\2\1\3\11\1\1\11\11\1\1"+
    "\1\0\1\1\1\0\1\1\1\11\2\1\1\11\11\1"+
    "\1\11\2\0\41\1\1\0\1\11\3\0\2\11\1\0"+
    "\7\1\1\0\207\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[326];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
  public static String lexeme;

  public String current_lexeme() {
    int l = yyline + 1;
    int c = yycolumn + 1;
    return " (line: " + l + " , column: " + c + " )";
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Scanner(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 226) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          {     return new Symbol (sym.EOF, new String("Fim do arquivo"));
 }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return new Symbol (sym.error, yycolumn, yyline, yytext());
            }
          case 99: break;
          case 2: 
            { return new Symbol (sym.I_CONSTANT, yycolumn, yyline, yytext());
            }
          case 100: break;
          case 3: 
            { return new Symbol (sym.IDENTIFIER, yycolumn, yyline, yytext());
            }
          case 101: break;
          case 4: 
            { return new Symbol (sym.MINUS, yycolumn, yyline, yytext());
            }
          case 102: break;
          case 5: 
            { return new Symbol (sym.QUESTION, yycolumn, yyline, yytext());
            }
          case 103: break;
          case 6: 
            { /* whitespace separates tokens */
            }
          case 104: break;
          case 7: 
            { return new Symbol (sym.DIV, yycolumn, yyline, yytext());
            }
          case 105: break;
          case 8: 
            { return new Symbol (sym.MULT, yycolumn, yyline, yytext());
            }
          case 106: break;
          case 9: 
            { return new Symbol (sym.DOT, yycolumn, yyline, yytext());
            }
          case 107: break;
          case 10: 
            { return new Symbol (sym.GT, yycolumn, yyline, yytext());
            }
          case 108: break;
          case 11: 
            { return new Symbol (sym.EQ, yycolumn, yyline, yytext());
            }
          case 109: break;
          case 12: 
            { return new Symbol (sym.LT, yycolumn, yyline, yytext());
            }
          case 110: break;
          case 13: 
            { return new Symbol (sym.PLUS, yycolumn, yyline, yytext());
            }
          case 111: break;
          case 14: 
            { return new Symbol (sym.MOD, yycolumn, yyline, yytext());
            }
          case 112: break;
          case 15: 
            { return new Symbol (sym.AND, yycolumn, yyline, yytext());
            }
          case 113: break;
          case 16: 
            { return new Symbol (sym.XOR, yycolumn, yyline, yytext());
            }
          case 114: break;
          case 17: 
            { return new Symbol (sym.OR, yycolumn, yyline, yytext());
            }
          case 115: break;
          case 18: 
            { return new Symbol (sym.NOT, yycolumn, yyline, yytext());
            }
          case 116: break;
          case 19: 
            { return new Symbol (sym.LPAREN, yycolumn, yyline, yytext());
            }
          case 117: break;
          case 20: 
            { return new Symbol (sym.RPAREN, yycolumn, yyline, yytext());
            }
          case 118: break;
          case 21: 
            { return new Symbol (sym.LBRACE, yycolumn, yyline, yytext());
            }
          case 119: break;
          case 22: 
            { return new Symbol (sym.RBRACE, yycolumn, yyline, yytext());
            }
          case 120: break;
          case 23: 
            { return new Symbol (sym.LBRACK, yycolumn, yyline, yytext());
            }
          case 121: break;
          case 24: 
            { return new Symbol (sym.COLON, yycolumn, yyline, yytext());
            }
          case 122: break;
          case 25: 
            { return new Symbol (sym.RBRACK, yycolumn, yyline, yytext());
            }
          case 123: break;
          case 26: 
            { return new Symbol (sym.SEMICOLON, yycolumn, yyline, yytext());
            }
          case 124: break;
          case 27: 
            { return new Symbol (sym.COMMA, yycolumn, yyline, yytext());
            }
          case 125: break;
          case 28: 
            { return new Symbol (sym.COMP, yycolumn, yyline, yytext());
            }
          case 126: break;
          case 29: 
            { return new Symbol (sym.F_CONSTANT, yycolumn, yyline, yytext());
            }
          case 127: break;
          case 30: 
            { return new Symbol (sym.DEC_OP, yycolumn, yyline, yytext());
            }
          case 128: break;
          case 31: 
            { return new Symbol (sym.PTR_OP, yycolumn, yyline, yytext());
            }
          case 129: break;
          case 32: 
            { return new Symbol (sym.SUB_ASSIGN, yycolumn, yyline, yytext());
            }
          case 130: break;
          case 33: 
            { /* skip it */
            }
          case 131: break;
          case 34: 
            { return new Symbol (sym.DIV_ASSIGN, yycolumn, yyline, yytext());
            }
          case 132: break;
          case 35: 
            { return new Symbol (sym.MUL_ASSIGN, yycolumn, yyline, yytext());
            }
          case 133: break;
          case 36: 
            { return new Symbol (sym.IF, yycolumn, yyline, yytext());
            }
          case 134: break;
          case 37: 
            { return new Symbol (sym.DO, yycolumn, yyline, yytext());
            }
          case 135: break;
          case 38: 
            { return new Symbol (sym.STRING_LITERAL, yycolumn, yyline, yytext());
            }
          case 136: break;
          case 39: 
            { return new Symbol (sym.RIGHT_OP, yycolumn, yyline, yytext());
            }
          case 137: break;
          case 40: 
            { return new Symbol (sym.GE_OP, yycolumn, yyline, yytext());
            }
          case 138: break;
          case 41: 
            { return new Symbol (sym.EQ_OP, yycolumn, yyline, yytext());
            }
          case 139: break;
          case 42: 
            { return new Symbol (sym.LE_OP, yycolumn, yyline, yytext());
            }
          case 140: break;
          case 43: 
            { return new Symbol (sym.LEFT_OP, yycolumn, yyline, yytext());
            }
          case 141: break;
          case 44: 
            { return new Symbol (sym.ADD_ASSIGN, yycolumn, yyline, yytext());
            }
          case 142: break;
          case 45: 
            { return new Symbol (sym.INC_OP, yycolumn, yyline, yytext());
            }
          case 143: break;
          case 46: 
            { return new Symbol (sym.MOD_ASSIGN, yycolumn, yyline, yytext());
            }
          case 144: break;
          case 47: 
            { return new Symbol (sym.AND_ASSIGN, yycolumn, yyline, yytext());
            }
          case 145: break;
          case 48: 
            { return new Symbol (sym.AND_OP, yycolumn, yyline, yytext());
            }
          case 146: break;
          case 49: 
            { return new Symbol (sym.XOR_ASSIGN, yycolumn, yyline, yytext());
            }
          case 147: break;
          case 50: 
            { return new Symbol (sym.OR_ASSIGN, yycolumn, yyline, yytext());
            }
          case 148: break;
          case 51: 
            { return new Symbol (sym.OR_OP, yycolumn, yyline, yytext());
            }
          case 149: break;
          case 52: 
            { return new Symbol (sym.NE_OP, yycolumn, yyline, yytext());
            }
          case 150: break;
          case 53: 
            { return new Symbol (sym.FOR, yycolumn, yyline, yytext());
            }
          case 151: break;
          case 54: 
            { return new Symbol (sym.INT, yycolumn, yyline, yytext());
            }
          case 152: break;
          case 55: 
            { return new Symbol (sym.ELLIPSIS, yycolumn, yyline, yytext());
            }
          case 153: break;
          case 56: 
            { return new Symbol (sym.RIGHT_ASSIGN, yycolumn, yyline, yytext());
            }
          case 154: break;
          case 57: 
            { return new Symbol (sym.LEFT_ASSIGN, yycolumn, yyline, yytext());
            }
          case 155: break;
          case 58: 
            { return new Symbol (sym.LONG, yycolumn, yyline, yytext());
            }
          case 156: break;
          case 59: 
            { return new Symbol (sym.VOID, yycolumn, yyline, yytext());
            }
          case 157: break;
          case 60: 
            { return new Symbol (sym.AUTO, yycolumn, yyline, yytext());
            }
          case 158: break;
          case 61: 
            { return new Symbol (sym.ELSE, yycolumn, yyline, yytext());
            }
          case 159: break;
          case 62: 
            { return new Symbol (sym.ENUM, yycolumn, yyline, yytext());
            }
          case 160: break;
          case 63: 
            { return new Symbol (sym.CASE, yycolumn, yyline, yytext());
            }
          case 161: break;
          case 64: 
            { return new Symbol (sym.CHAR, yycolumn, yyline, yytext());
            }
          case 162: break;
          case 65: 
            { return new Symbol (sym.GOTO, yycolumn, yyline, yytext());
            }
          case 163: break;
          case 66: 
            { return new Symbol (sym.FLOAT, yycolumn, yyline, yytext());
            }
          case 164: break;
          case 67: 
            { return new Symbol (sym.UNION, yycolumn, yyline, yytext());
            }
          case 165: break;
          case 68: 
            { return new Symbol (sym.BREAK, yycolumn, yyline, yytext());
            }
          case 166: break;
          case 69: 
            { return new Symbol (sym.CONST, yycolumn, yyline, yytext());
            }
          case 167: break;
          case 70: 
            { return new Symbol (sym.SHORT, yycolumn, yyline, yytext());
            }
          case 168: break;
          case 71: 
            { return new Symbol (sym.WHILE, yycolumn, yyline, yytext());
            }
          case 169: break;
          case 72: 
            { return new Symbol (sym.BOOL, yycolumn, yyline, yytext());
            }
          case 170: break;
          case 73: 
            { return new Symbol (sym.RETURN, yycolumn, yyline, yytext());
            }
          case 171: break;
          case 74: 
            { return new Symbol (sym.EXTERN, yycolumn, yyline, yytext());
            }
          case 172: break;
          case 75: 
            { return new Symbol (sym.STATIC, yycolumn, yyline, yytext());
            }
          case 173: break;
          case 76: 
            { return new Symbol (sym.STRUCT, yycolumn, yyline, yytext());
            }
          case 174: break;
          case 77: 
            { return new Symbol (sym.SIGNED, yycolumn, yyline, yytext());
            }
          case 175: break;
          case 78: 
            { return new Symbol (sym.SIZEOF, yycolumn, yyline, yytext());
            }
          case 176: break;
          case 79: 
            { return new Symbol (sym.SWITCH, yycolumn, yyline, yytext());
            }
          case 177: break;
          case 80: 
            { return new Symbol (sym.INLINE, yycolumn, yyline, yytext());
            }
          case 178: break;
          case 81: 
            { return new Symbol (sym.DOUBLE, yycolumn, yyline, yytext());
            }
          case 179: break;
          case 82: 
            { return new Symbol (sym.TYPEDEF, yycolumn, yyline, yytext());
            }
          case 180: break;
          case 83: 
            { return new Symbol (sym.DEFAULT, yycolumn, yyline, yytext());
            }
          case 181: break;
          case 84: 
            { return new Symbol (sym.ATOMIC, yycolumn, yyline, yytext());
            }
          case 182: break;
          case 85: 
            { return new Symbol (sym.UNSIGNED, yycolumn, yyline, yytext());
            }
          case 183: break;
          case 86: 
            { return new Symbol (sym.VOLATILE, yycolumn, yyline, yytext());
            }
          case 184: break;
          case 87: 
            { return new Symbol (sym.RESTRICT, yycolumn, yyline, yytext());
            }
          case 185: break;
          case 88: 
            { return new Symbol (sym.REGISTER, yycolumn, yyline, yytext());
            }
          case 186: break;
          case 89: 
            { return new Symbol (sym.CONTINUE, yycolumn, yyline, yytext());
            }
          case 187: break;
          case 90: 
            { return new Symbol (sym.FUNC_NAME, yycolumn, yyline, yytext());
            }
          case 188: break;
          case 91: 
            { return new Symbol (sym.ALIGNAS, yycolumn, yyline, yytext());
            }
          case 189: break;
          case 92: 
            { return new Symbol (sym.ALIGNOF, yycolumn, yyline, yytext());
            }
          case 190: break;
          case 93: 
            { return new Symbol (sym.COMPLEX, yycolumn, yyline, yytext());
            }
          case 191: break;
          case 94: 
            { return new Symbol (sym.GENERIC, yycolumn, yyline, yytext());
            }
          case 192: break;
          case 95: 
            { return new Symbol (sym.NORETURN, yycolumn, yyline, yytext());
            }
          case 193: break;
          case 96: 
            { return new Symbol (sym.IMAGINARY, yycolumn, yyline, yytext());
            }
          case 194: break;
          case 97: 
            { return new Symbol (sym.THREAD_LOCAL, yycolumn, yyline, yytext());
            }
          case 195: break;
          case 98: 
            { return new Symbol (sym.STATIC_ASSERT, yycolumn, yyline, yytext());
            }
          case 196: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }

  /**
   * Converts an int token code into the name of the
   * token by reflection on the cup symbol class/interface sym
   *
   * This code was contributed by Karl Meissner <meissnersd@yahoo.com>
   */
  private String getTokenName(int token) {
    try {
      java.lang.reflect.Field [] classFields = sym.class.getFields();
      for (int i = 0; i < classFields.length; i++) {
        if (classFields[i].getInt(null) == token) {
          return classFields[i].getName();
        }
      }
    } catch (Exception e) {
      e.printStackTrace(System.err);
    }

    return "UNKNOWN TOKEN";
  }

  /**
   * Same as next_token but also prints the token to standard out
   * for debugging.
   *
   * This code was contributed by Karl Meissner <meissnersd@yahoo.com>
   */
  public java_cup.runtime.Symbol debug_next_token() throws java.io.IOException {
    java_cup.runtime.Symbol s = next_token();
    System.out.println( "line:" + (yyline+1) + " col:" + (yycolumn+1) + " --"+ yytext() + "--" + getTokenName(s.sym) + "--");
    return s;
  }

  /**
   * Runs the scanner on input files.
   *
   * This main method is the debugging routine for the scanner.
   * It prints debugging information about each returned token to
   * System.out until the end of file is reached, or an error occured.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java Scanner [ --encoding <name> ] <inputfile(s)>");
    }
    else {
      int firstFilePos = 0;
      String encodingName = "UTF-8";
      if (argv[0].equals("--encoding")) {
        firstFilePos = 2;
        encodingName = argv[1];
        try {
          java.nio.charset.Charset.forName(encodingName); // Side-effect: is encodingName valid? 
        } catch (Exception e) {
          System.out.println("Invalid encoding '" + encodingName + "'");
          return;
        }
      }
      for (int i = firstFilePos; i < argv.length; i++) {
        Scanner scanner = null;
        try {
          java.io.FileInputStream stream = new java.io.FileInputStream(argv[i]);
          java.io.Reader reader = new java.io.InputStreamReader(stream, encodingName);
          scanner = new Scanner(reader);
          while ( !scanner.zzAtEOF ) scanner.debug_next_token();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
