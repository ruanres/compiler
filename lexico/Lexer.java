/* The following code was generated by JFlex 1.4.3 on 01/02/18 21:41 */

package lexico;
/* Reference: http://www.quut.com/c/ANSI-C-grammar-l.html */

import static lexico.Token.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 01/02/18 21:41 from the specification file
 * <tt>/home/mafra/workspace/compiler/lexico/lexer.flex</tt>
 */
class Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\25\1\62\1\0\1\25\23\0\1\25\1\76\3\0\1\72"+
    "\1\73\1\61\1\104\1\105\1\70\1\67\1\102\1\10\1\63\1\71"+
    "\1\1\7\3\1\2\1\2\1\103\1\77\1\66\1\65\1\64\1\21"+
    "\1\0\1\51\1\52\1\53\1\5\1\7\1\13\1\54\1\4\1\55"+
    "\2\4\1\15\1\4\1\56\1\4\1\11\2\4\1\57\1\60\1\17"+
    "\2\4\1\6\2\4\1\106\1\20\1\107\1\74\1\50\1\0\1\27"+
    "\1\23\1\35\1\41\1\33\1\12\1\43\1\37\1\40\1\4\1\34"+
    "\1\14\1\42\1\22\1\31\1\47\1\4\1\32\1\36\1\30\1\16"+
    "\1\26\1\45\1\24\1\46\1\44\1\100\1\75\1\101\1\110\uff81\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\2\2\1\3\1\4\4\3\1\5\1\3"+
    "\1\6\14\3\1\1\1\7\1\10\1\11\1\12\1\13"+
    "\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23"+
    "\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33"+
    "\1\34\1\2\3\0\3\2\1\35\1\36\1\37\1\40"+
    "\3\3\1\0\21\3\1\41\1\3\1\42\14\3\3\0"+
    "\1\43\1\44\1\45\1\46\1\47\1\50\1\51\1\52"+
    "\1\53\1\54\1\55\1\56\1\57\1\60\1\61\1\62"+
    "\1\2\1\0\1\35\1\0\4\2\1\35\1\3\1\63"+
    "\30\3\1\64\16\3\1\65\1\0\1\66\1\67\1\70"+
    "\1\0\1\3\1\71\4\3\1\72\1\73\4\3\1\74"+
    "\1\75\1\3\1\76\2\3\1\77\11\3\1\100\13\3"+
    "\1\101\1\3\1\102\1\103\7\3\1\104\2\3\1\105"+
    "\6\3\1\106\3\3\1\107\11\3\1\110\2\3\1\111"+
    "\1\3\1\112\1\113\1\114\1\115\1\116\1\117\1\120"+
    "\14\3\1\121\3\3\1\122\3\3\1\123\6\3\1\124"+
    "\1\125\1\126\1\127\1\130\1\131\1\132\1\133\1\134"+
    "\1\135\5\3\1\136\2\3\1\137\7\3\1\140\1\141";

  private static int [] zzUnpackAction() {
    int [] result = new int[312];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\111\0\222\0\333\0\u0124\0\u016d\0\u01b6\0\u01ff"+
    "\0\u0248\0\u0291\0\111\0\u02da\0\u0323\0\u036c\0\u03b5\0\u03fe"+
    "\0\u0447\0\u0490\0\u04d9\0\u0522\0\u056b\0\u05b4\0\u05fd\0\u0646"+
    "\0\u068f\0\u06d8\0\u0721\0\u076a\0\u07b3\0\u07fc\0\u0845\0\u088e"+
    "\0\u08d7\0\u0920\0\u0969\0\u09b2\0\u09fb\0\u0a44\0\111\0\111"+
    "\0\111\0\111\0\u0a8d\0\111\0\111\0\111\0\111\0\111"+
    "\0\u0ad6\0\u0b1f\0\u0b68\0\u0bb1\0\u0bfa\0\u0c43\0\u0c8c\0\u0cd5"+
    "\0\111\0\111\0\111\0\u0d1e\0\u0d67\0\u0db0\0\u06d8\0\u0df9"+
    "\0\u0e42\0\u0e8b\0\u0ed4\0\u0f1d\0\u0f66\0\u0faf\0\u0ff8\0\u1041"+
    "\0\u108a\0\u10d3\0\u111c\0\u1165\0\u11ae\0\u11f7\0\u1240\0\u1289"+
    "\0\u0124\0\u12d2\0\u131b\0\u1364\0\u13ad\0\u13f6\0\u143f\0\u1488"+
    "\0\u14d1\0\u151a\0\u1563\0\u15ac\0\u15f5\0\u163e\0\u1687\0\u16d0"+
    "\0\u1719\0\u1762\0\u17ab\0\111\0\111\0\111\0\u17f4\0\111"+
    "\0\111\0\111\0\111\0\111\0\111\0\111\0\111\0\111"+
    "\0\111\0\111\0\u183d\0\u1886\0\u18cf\0\u1918\0\u1961\0\111"+
    "\0\u19aa\0\u19f3\0\111\0\u1a3c\0\u0124\0\u1a85\0\u1ace\0\u1b17"+
    "\0\u1b60\0\u1ba9\0\u1bf2\0\u1c3b\0\u1c84\0\u1ccd\0\u1d16\0\u1d5f"+
    "\0\u1da8\0\u1df1\0\u1e3a\0\u1e83\0\u1ecc\0\u1f15\0\u1f5e\0\u1fa7"+
    "\0\u1ff0\0\u2039\0\u2082\0\u20cb\0\u2114\0\u0124\0\u215d\0\u21a6"+
    "\0\u21ef\0\u2238\0\u2281\0\u22ca\0\u2313\0\u235c\0\u23a5\0\u23ee"+
    "\0\u2437\0\u2480\0\u24c9\0\u2512\0\111\0\u255b\0\111\0\111"+
    "\0\111\0\u25a4\0\u25ed\0\u0124\0\u2636\0\u267f\0\u26c8\0\u2711"+
    "\0\u0124\0\u0124\0\u275a\0\u27a3\0\u27ec\0\u2835\0\u0124\0\u0124"+
    "\0\u287e\0\u0124\0\u28c7\0\u2910\0\u0124\0\u2959\0\u29a2\0\u29eb"+
    "\0\u2a34\0\u2a7d\0\u2ac6\0\u2b0f\0\u2b58\0\u2ba1\0\u0124\0\u2bea"+
    "\0\u2c33\0\u2c7c\0\u2cc5\0\u2d0e\0\u2d57\0\u2da0\0\u2de9\0\u2e32"+
    "\0\u2e7b\0\u2ec4\0\u0124\0\u2f0d\0\u0124\0\u0124\0\u2f56\0\u2f9f"+
    "\0\u2fe8\0\u3031\0\u307a\0\u30c3\0\u310c\0\u0124\0\u3155\0\u319e"+
    "\0\u0124\0\u31e7\0\u3230\0\u3279\0\u32c2\0\u330b\0\u3354\0\u0124"+
    "\0\u339d\0\u33e6\0\u342f\0\u0124\0\u3478\0\u34c1\0\u350a\0\u3553"+
    "\0\u359c\0\u35e5\0\u362e\0\u3677\0\u36c0\0\u0124\0\u3709\0\u3752"+
    "\0\u0124\0\u379b\0\u0124\0\u0124\0\u0124\0\u0124\0\u0124\0\u0124"+
    "\0\u0124\0\u37e4\0\u382d\0\u3876\0\u38bf\0\u3908\0\u3951\0\u399a"+
    "\0\u39e3\0\u3a2c\0\u3a75\0\u3abe\0\u3b07\0\u0124\0\u3b50\0\u3b99"+
    "\0\u3be2\0\u0124\0\u3c2b\0\u3c74\0\u3cbd\0\u0124\0\u3d06\0\u3d4f"+
    "\0\u3d98\0\u3de1\0\u3e2a\0\u3e73\0\u0124\0\u0124\0\u0124\0\u0124"+
    "\0\u0124\0\u0124\0\u0124\0\u0124\0\u0124\0\u0124\0\u3ebc\0\u3f05"+
    "\0\u3f4e\0\u3f97\0\u3fe0\0\u0124\0\u4029\0\u4072\0\u0124\0\u40bb"+
    "\0\u4104\0\u414d\0\u4196\0\u41df\0\u4228\0\u4271\0\u0124\0\u0124";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[312];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\2\4\4\5\1\6\1\5\1\7\1\5"+
    "\1\10\1\11\1\12\1\11\1\2\1\13\1\5\1\14"+
    "\1\5\1\15\1\16\1\17\1\20\1\5\1\21\1\22"+
    "\1\5\1\23\1\24\1\5\1\25\1\26\1\5\1\27"+
    "\1\5\1\30\2\5\1\31\10\5\1\32\1\15\1\33"+
    "\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43"+
    "\1\44\1\45\1\46\1\47\1\50\1\51\1\52\1\53"+
    "\1\54\1\55\1\56\1\57\1\60\112\0\1\61\1\62"+
    "\1\61\2\0\1\63\1\64\4\0\1\65\1\66\2\67"+
    "\4\0\1\63\6\0\1\64\27\0\1\70\26\0\3\4"+
    "\3\0\1\64\4\0\1\65\1\66\2\67\13\0\1\64"+
    "\27\0\1\70\26\0\7\5\1\0\7\5\2\0\3\5"+
    "\1\0\33\5\40\0\1\71\53\0\1\72\1\73\24\0"+
    "\7\5\1\0\3\5\1\74\3\5\2\0\3\5\1\0"+
    "\3\5\1\75\27\5\31\0\7\5\1\0\7\5\2\0"+
    "\3\5\1\0\3\5\1\76\27\5\31\0\7\5\1\0"+
    "\7\5\2\0\3\5\1\0\33\5\1\77\30\0\7\5"+
    "\1\0\7\5\2\0\1\100\2\5\1\0\33\5\1\77"+
    "\30\0\7\5\1\0\7\5\2\0\3\5\1\0\4\5"+
    "\1\101\26\5\55\0\2\15\33\0\1\15\27\0\7\5"+
    "\1\0\7\5\2\0\3\5\1\15\1\102\2\5\1\103"+
    "\27\5\1\0\1\15\27\0\7\5\1\0\5\5\1\104"+
    "\1\5\2\0\3\5\1\0\33\5\31\0\7\5\1\0"+
    "\7\5\2\0\3\5\1\0\20\5\1\105\12\5\31\0"+
    "\7\5\1\0\7\5\2\0\3\5\1\0\5\5\1\106"+
    "\25\5\31\0\7\5\1\0\3\5\1\107\3\5\2\0"+
    "\1\110\1\5\1\111\1\0\33\5\31\0\7\5\1\0"+
    "\7\5\2\0\3\5\1\0\1\5\1\112\1\5\1\113"+
    "\5\5\1\114\21\5\31\0\7\5\1\0\7\5\2\0"+
    "\3\5\1\0\2\5\1\115\6\5\1\116\1\117\4\5"+
    "\1\120\13\5\31\0\7\5\1\0\1\5\1\121\5\5"+
    "\2\0\1\122\2\5\1\0\33\5\31\0\7\5\1\0"+
    "\7\5\2\0\3\5\1\0\3\5\1\123\1\5\1\124"+
    "\25\5\31\0\7\5\1\0\7\5\2\0\3\5\1\0"+
    "\3\5\1\125\27\5\31\0\7\5\1\0\7\5\2\0"+
    "\3\5\1\0\11\5\1\126\21\5\31\0\7\5\1\0"+
    "\7\5\2\0\3\5\1\0\22\5\1\127\1\130\1\131"+
    "\1\132\1\133\1\134\1\135\1\136\1\137\30\0\20\140"+
    "\1\141\40\140\2\0\26\140\1\0\3\70\57\0\1\142"+
    "\111\0\1\143\1\144\110\0\1\145\110\0\1\146\1\147"+
    "\3\0\1\50\10\0\1\56\72\0\1\150\1\0\1\151"+
    "\106\0\1\152\110\0\1\153\107\0\1\51\1\154\110\0"+
    "\1\155\5\0\1\156\102\0\1\157\110\0\1\160\7\0"+
    "\1\161\100\0\1\162\107\0\1\57\25\0\1\61\1\62"+
    "\1\61\3\0\1\64\4\0\1\65\1\66\2\67\13\0"+
    "\1\64\27\0\1\70\26\0\3\62\3\0\1\64\23\0"+
    "\1\64\27\0\1\70\26\0\3\163\1\0\1\163\1\0"+
    "\1\163\2\0\2\163\7\0\1\163\3\0\1\163\3\0"+
    "\1\163\1\0\1\163\3\0\1\163\7\0\3\163\7\0"+
    "\1\164\26\0\3\165\4\0\1\166\56\0\1\166\35\0"+
    "\1\167\1\0\2\170\106\0\1\167\2\170\105\0\1\171"+
    "\1\172\74\0\3\70\3\0\1\64\2\0\4\173\15\0"+
    "\1\64\56\0\7\5\1\0\7\5\2\0\3\5\1\0"+
    "\3\5\1\174\27\5\31\0\7\5\1\0\7\5\2\0"+
    "\3\5\1\0\4\5\1\175\26\5\31\0\7\5\1\0"+
    "\7\5\2\0\1\176\2\5\1\0\33\5\31\0\7\5"+
    "\1\0\7\5\2\0\3\5\1\0\10\5\1\177\1\5"+
    "\1\200\20\5\31\0\7\5\1\0\7\5\2\0\3\5"+
    "\1\0\5\5\1\201\25\5\31\0\7\5\1\0\7\5"+
    "\2\0\3\5\1\15\1\102\32\5\1\0\1\15\27\0"+
    "\7\5\1\0\3\5\1\202\3\5\2\0\3\5\1\0"+
    "\12\5\1\203\20\5\31\0\7\5\1\0\7\5\2\0"+
    "\3\5\1\0\2\5\1\204\30\5\31\0\7\5\1\0"+
    "\7\5\2\0\3\5\1\0\21\5\1\205\11\5\31\0"+
    "\7\5\1\0\7\5\2\0\3\5\1\0\2\5\1\206"+
    "\5\5\1\207\4\5\1\210\15\5\31\0\7\5\1\0"+
    "\7\5\2\0\3\5\1\0\10\5\1\211\22\5\31\0"+
    "\7\5\1\0\5\5\1\212\1\5\2\0\3\5\1\0"+
    "\33\5\31\0\7\5\1\0\7\5\2\0\3\5\1\0"+
    "\2\5\1\213\30\5\31\0\7\5\1\0\7\5\2\0"+
    "\3\5\1\0\10\5\1\214\22\5\31\0\7\5\1\0"+
    "\7\5\2\0\1\215\2\5\1\0\33\5\31\0\7\5"+
    "\1\0\7\5\2\0\3\5\1\0\1\5\1\216\31\5"+
    "\31\0\7\5\1\0\7\5\2\0\3\5\1\0\1\5"+
    "\1\217\2\5\1\220\26\5\31\0\7\5\1\0\7\5"+
    "\2\0\3\5\1\0\3\5\1\221\27\5\31\0\7\5"+
    "\1\0\7\5\2\0\3\5\1\0\15\5\1\222\1\223"+
    "\14\5\31\0\7\5\1\0\7\5\2\0\3\5\1\0"+
    "\12\5\1\224\20\5\31\0\7\5\1\0\3\5\1\225"+
    "\3\5\2\0\3\5\1\0\2\5\1\226\30\5\31\0"+
    "\7\5\1\0\5\5\1\227\1\5\2\0\3\5\1\0"+
    "\33\5\31\0\7\5\1\0\1\5\1\230\5\5\2\0"+
    "\3\5\1\0\33\5\31\0\7\5\1\0\7\5\2\0"+
    "\3\5\1\0\2\5\1\231\30\5\31\0\7\5\1\0"+
    "\7\5\2\0\3\5\1\0\12\5\1\232\20\5\31\0"+
    "\7\5\1\0\1\5\1\233\5\5\2\0\3\5\1\0"+
    "\33\5\31\0\7\5\1\0\3\5\1\234\3\5\2\0"+
    "\3\5\1\0\2\5\1\235\30\5\31\0\7\5\1\0"+
    "\7\5\2\0\3\5\1\0\3\5\1\236\27\5\31\0"+
    "\7\5\1\0\7\5\2\0\3\5\1\0\3\5\1\237"+
    "\27\5\31\0\7\5\1\0\7\5\2\0\3\5\1\0"+
    "\5\5\1\240\25\5\31\0\7\5\1\0\7\5\2\0"+
    "\3\5\1\0\14\5\1\241\16\5\31\0\7\5\1\0"+
    "\7\5\2\0\3\5\1\0\3\5\1\242\27\5\31\0"+
    "\7\5\1\0\7\5\2\0\3\5\1\0\2\5\1\243"+
    "\30\5\31\0\7\5\1\0\7\5\2\0\3\5\1\0"+
    "\11\5\1\244\21\5\30\0\20\140\1\141\40\140\1\245"+
    "\1\0\26\140\1\0\1\140\1\0\1\140\6\0\1\140"+
    "\5\0\4\140\1\246\1\0\3\140\1\0\1\140\26\0"+
    "\1\140\112\0\1\247\112\0\1\250\110\0\1\251\24\0"+
    "\3\163\1\0\1\163\1\0\1\163\1\0\1\64\2\163"+
    "\1\65\1\66\2\67\3\0\1\163\3\0\1\163\3\0"+
    "\1\163\1\0\1\163\3\0\1\163\5\0\1\64\1\0"+
    "\3\163\7\0\1\252\26\0\3\252\1\0\1\252\1\0"+
    "\1\252\2\0\2\252\7\0\1\252\3\0\1\252\3\0"+
    "\1\252\1\0\1\252\3\0\1\252\7\0\3\252\36\0"+
    "\3\165\6\0\4\173\74\0\3\165\123\0\2\170\105\0"+
    "\1\170\111\0\1\170\74\0\7\5\1\0\7\5\2\0"+
    "\3\5\1\0\1\5\1\253\31\5\31\0\7\5\1\0"+
    "\7\5\2\0\3\5\1\0\15\5\1\254\15\5\31\0"+
    "\7\5\1\0\7\5\2\0\3\5\1\0\12\5\1\255"+
    "\20\5\31\0\7\5\1\0\7\5\2\0\3\5\1\0"+
    "\3\5\1\256\27\5\31\0\7\5\1\0\7\5\2\0"+
    "\3\5\1\0\1\5\1\257\31\5\31\0\7\5\1\0"+
    "\7\5\2\0\3\5\1\0\1\5\1\260\31\5\31\0"+
    "\7\5\1\0\7\5\2\0\3\5\1\0\13\5\1\261"+
    "\17\5\31\0\7\5\1\0\7\5\2\0\3\5\1\0"+
    "\3\5\1\262\27\5\31\0\7\5\1\0\7\5\2\0"+
    "\3\5\1\0\5\5\1\263\25\5\31\0\7\5\1\0"+
    "\5\5\1\264\1\5\2\0\3\5\1\0\33\5\31\0"+
    "\7\5\1\0\7\5\2\0\3\5\1\0\2\5\1\265"+
    "\30\5\31\0\7\5\1\0\7\5\2\0\3\5\1\0"+
    "\12\5\1\266\20\5\31\0\7\5\1\0\7\5\2\0"+
    "\3\5\1\0\5\5\1\267\25\5\31\0\7\5\1\0"+
    "\7\5\2\0\3\5\1\0\14\5\1\270\16\5\31\0"+
    "\7\5\1\0\7\5\2\0\3\5\1\0\5\5\1\271"+
    "\25\5\31\0\7\5\1\0\7\5\2\0\3\5\1\0"+
    "\5\5\1\272\25\5\31\0\7\5\1\0\7\5\2\0"+
    "\3\5\1\0\2\5\1\273\5\5\1\274\22\5\31\0"+
    "\7\5\1\0\7\5\2\0\3\5\1\0\4\5\1\275"+
    "\26\5\31\0\7\5\1\0\7\5\2\0\3\5\1\0"+
    "\2\5\1\276\30\5\31\0\7\5\1\0\5\5\1\277"+
    "\1\5\2\0\3\5\1\0\33\5\31\0\7\5\1\0"+
    "\7\5\2\0\3\5\1\0\4\5\1\300\26\5\31\0"+
    "\7\5\1\0\7\5\2\0\1\301\2\5\1\0\33\5"+
    "\31\0\7\5\1\0\7\5\2\0\3\5\1\0\5\5"+
    "\1\302\25\5\31\0\7\5\1\0\7\5\2\0\3\5"+
    "\1\0\2\5\1\303\30\5\31\0\7\5\1\0\7\5"+
    "\2\0\3\5\1\0\12\5\1\304\20\5\31\0\7\5"+
    "\1\0\7\5\2\0\1\5\1\305\1\5\1\0\33\5"+
    "\31\0\7\5\1\0\7\5\2\0\3\5\1\0\1\5"+
    "\1\306\31\5\31\0\7\5\1\0\7\5\2\0\3\5"+
    "\1\0\3\5\1\307\27\5\31\0\7\5\1\0\3\5"+
    "\1\310\3\5\2\0\3\5\1\0\33\5\31\0\7\5"+
    "\1\0\5\5\1\311\1\5\2\0\3\5\1\0\33\5"+
    "\31\0\7\5\1\0\7\5\2\0\3\5\1\0\12\5"+
    "\1\312\20\5\31\0\7\5\1\0\7\5\2\0\3\5"+
    "\1\0\3\5\1\313\27\5\31\0\7\5\1\0\7\5"+
    "\2\0\3\5\1\0\3\5\1\314\27\5\31\0\7\5"+
    "\1\0\7\5\2\0\3\5\1\0\14\5\1\315\16\5"+
    "\31\0\7\5\1\0\7\5\2\0\1\316\2\5\1\0"+
    "\33\5\31\0\7\5\1\0\7\5\2\0\3\5\1\0"+
    "\1\5\1\317\31\5\31\0\7\5\1\0\7\5\2\0"+
    "\3\5\1\0\4\5\1\320\26\5\31\0\7\5\1\0"+
    "\7\5\2\0\3\5\1\0\1\5\1\321\31\5\31\0"+
    "\7\5\1\0\7\5\2\0\3\5\1\0\4\5\1\322"+
    "\26\5\31\0\3\140\1\0\1\140\1\0\1\140\2\0"+
    "\2\140\7\0\1\140\3\0\1\140\3\0\1\140\1\0"+
    "\1\140\3\0\1\140\7\0\3\140\36\0\3\252\1\0"+
    "\1\252\1\0\1\252\1\0\1\64\2\252\7\0\1\252"+
    "\3\0\1\252\3\0\1\252\1\0\1\252\3\0\1\252"+
    "\5\0\1\64\1\0\3\252\36\0\7\5\1\0\7\5"+
    "\2\0\3\5\1\0\2\5\1\323\30\5\31\0\7\5"+
    "\1\0\7\5\2\0\3\5\1\0\15\5\1\324\15\5"+
    "\31\0\7\5\1\0\7\5\2\0\1\325\2\5\1\0"+
    "\33\5\31\0\7\5\1\0\7\5\2\0\3\5\1\0"+
    "\6\5\1\326\24\5\31\0\7\5\1\0\7\5\2\0"+
    "\3\5\1\0\2\5\1\327\30\5\31\0\7\5\1\0"+
    "\7\5\2\0\3\5\1\0\13\5\1\330\17\5\31\0"+
    "\7\5\1\0\7\5\2\0\3\5\1\0\4\5\1\331"+
    "\26\5\31\0\7\5\1\0\7\5\2\0\3\5\1\0"+
    "\4\5\1\332\26\5\31\0\7\5\1\0\7\5\2\0"+
    "\3\5\1\0\10\5\1\333\22\5\31\0\7\5\1\0"+
    "\7\5\2\0\3\5\1\0\4\5\1\334\26\5\31\0"+
    "\7\5\1\0\7\5\2\0\3\5\1\0\12\5\1\335"+
    "\20\5\31\0\7\5\1\0\7\5\2\0\3\5\1\0"+
    "\2\5\1\336\30\5\31\0\7\5\1\0\7\5\2\0"+
    "\3\5\1\0\12\5\1\337\20\5\31\0\7\5\1\0"+
    "\7\5\2\0\3\5\1\0\7\5\1\340\23\5\31\0"+
    "\7\5\1\0\7\5\2\0\3\5\1\0\2\5\1\341"+
    "\30\5\31\0\7\5\1\0\7\5\2\0\3\5\1\0"+
    "\5\5\1\342\25\5\31\0\7\5\1\0\7\5\2\0"+
    "\3\5\1\0\3\5\1\343\27\5\31\0\7\5\1\0"+
    "\7\5\2\0\3\5\1\0\7\5\1\344\23\5\31\0"+
    "\7\5\1\0\7\5\2\0\1\345\2\5\1\0\33\5"+
    "\31\0\7\5\1\0\3\5\1\346\3\5\2\0\3\5"+
    "\1\0\33\5\31\0\7\5\1\0\5\5\1\347\1\5"+
    "\2\0\3\5\1\0\33\5\31\0\7\5\1\0\7\5"+
    "\2\0\3\5\1\0\5\5\1\350\25\5\31\0\7\5"+
    "\1\0\7\5\2\0\1\351\2\5\1\0\33\5\31\0"+
    "\7\5\1\0\7\5\2\0\3\5\1\0\15\5\1\352"+
    "\15\5\31\0\7\5\1\0\7\5\2\0\3\5\1\0"+
    "\14\5\1\353\16\5\31\0\7\5\1\0\3\5\1\354"+
    "\3\5\2\0\3\5\1\0\33\5\31\0\7\5\1\0"+
    "\7\5\2\0\3\5\1\0\21\5\1\355\11\5\31\0"+
    "\7\5\1\0\7\5\2\0\3\5\1\0\5\5\1\356"+
    "\25\5\31\0\7\5\1\0\7\5\2\0\3\5\1\0"+
    "\15\5\1\357\15\5\31\0\7\5\1\0\7\5\2\0"+
    "\3\5\1\0\5\5\1\360\25\5\31\0\7\5\1\0"+
    "\7\5\2\0\3\5\1\0\2\5\1\361\30\5\31\0"+
    "\7\5\1\0\7\5\2\0\3\5\1\0\5\5\1\362"+
    "\25\5\31\0\7\5\1\0\7\5\2\0\1\363\2\5"+
    "\1\0\33\5\31\0\7\5\1\0\7\5\2\0\3\5"+
    "\1\0\12\5\1\364\20\5\31\0\7\5\1\0\7\5"+
    "\2\0\3\5\1\0\5\5\1\365\25\5\31\0\7\5"+
    "\1\0\7\5\2\0\1\366\2\5\1\0\33\5\31\0"+
    "\7\5\1\0\7\5\2\0\3\5\1\0\12\5\1\367"+
    "\20\5\31\0\7\5\1\0\7\5\2\0\3\5\1\0"+
    "\2\5\1\370\30\5\31\0\7\5\1\0\7\5\2\0"+
    "\1\371\2\5\1\0\33\5\31\0\7\5\1\0\7\5"+
    "\2\0\1\372\2\5\1\0\33\5\31\0\7\5\1\0"+
    "\7\5\2\0\3\5\1\0\7\5\1\373\23\5\31\0"+
    "\7\5\1\0\7\5\2\0\3\5\1\0\2\5\1\374"+
    "\30\5\31\0\7\5\1\0\7\5\2\0\3\5\1\0"+
    "\13\5\1\375\17\5\31\0\7\5\1\0\1\5\1\376"+
    "\5\5\2\0\3\5\1\0\33\5\31\0\7\5\1\0"+
    "\7\5\2\0\3\5\1\0\11\5\1\377\21\5\31\0"+
    "\7\5\1\0\7\5\2\0\3\5\1\0\5\5\1\u0100"+
    "\25\5\31\0\7\5\1\0\7\5\2\0\3\5\1\0"+
    "\5\5\1\u0101\25\5\31\0\7\5\1\0\3\5\1\u0102"+
    "\3\5\2\0\3\5\1\0\33\5\31\0\7\5\1\0"+
    "\7\5\2\0\3\5\1\0\7\5\1\u0103\23\5\31\0"+
    "\7\5\1\0\7\5\2\0\1\u0104\2\5\1\0\33\5"+
    "\31\0\7\5\1\0\7\5\2\0\3\5\1\0\12\5"+
    "\1\u0105\20\5\31\0\7\5\1\0\3\5\1\u0106\3\5"+
    "\2\0\3\5\1\0\33\5\31\0\7\5\1\0\7\5"+
    "\2\0\3\5\1\0\4\5\1\u0107\26\5\31\0\7\5"+
    "\1\0\7\5\2\0\3\5\1\0\12\5\1\u0108\20\5"+
    "\31\0\7\5\1\0\7\5\2\0\3\5\1\0\2\5"+
    "\1\u0109\30\5\31\0\7\5\1\0\7\5\2\0\3\5"+
    "\1\0\12\5\1\u010a\20\5\31\0\7\5\1\0\7\5"+
    "\2\0\3\5\1\0\1\5\1\u010b\31\5\31\0\7\5"+
    "\1\0\7\5\2\0\3\5\1\0\5\5\1\u010c\25\5"+
    "\31\0\7\5\1\0\3\5\1\u010d\3\5\2\0\3\5"+
    "\1\0\33\5\31\0\7\5\1\0\1\5\1\u010e\5\5"+
    "\2\0\3\5\1\0\33\5\31\0\7\5\1\0\7\5"+
    "\2\0\3\5\1\0\7\5\1\u010f\23\5\31\0\7\5"+
    "\1\0\7\5\2\0\3\5\1\0\5\5\1\u0110\25\5"+
    "\31\0\7\5\1\0\5\5\1\u0111\1\5\2\0\3\5"+
    "\1\0\33\5\31\0\7\5\1\0\7\5\2\0\3\5"+
    "\1\0\2\5\1\u0112\30\5\31\0\7\5\1\0\7\5"+
    "\2\0\3\5\1\0\22\5\1\u0113\10\5\31\0\7\5"+
    "\1\0\7\5\2\0\3\5\1\0\1\5\1\u0114\1\5"+
    "\1\u0115\27\5\31\0\7\5\1\0\7\5\2\0\3\5"+
    "\1\0\7\5\1\u0116\23\5\31\0\7\5\1\0\7\5"+
    "\2\0\3\5\1\0\5\5\1\u0117\25\5\31\0\7\5"+
    "\1\0\7\5\2\0\3\5\1\0\12\5\1\u0118\20\5"+
    "\31\0\7\5\1\0\7\5\2\0\1\u0119\2\5\1\0"+
    "\33\5\31\0\7\5\1\0\5\5\1\u011a\1\5\2\0"+
    "\3\5\1\0\33\5\31\0\7\5\1\0\7\5\2\0"+
    "\3\5\1\0\7\5\1\u011b\23\5\31\0\7\5\1\0"+
    "\7\5\2\0\3\5\1\0\13\5\1\u011c\17\5\31\0"+
    "\7\5\1\0\7\5\2\0\3\5\1\0\13\5\1\u011d"+
    "\17\5\31\0\7\5\1\0\7\5\2\0\3\5\1\0"+
    "\5\5\1\u011e\25\5\31\0\7\5\1\0\7\5\2\0"+
    "\3\5\1\0\2\5\1\u011f\30\5\31\0\7\5\1\0"+
    "\7\5\2\0\3\5\1\0\4\5\1\u0120\26\5\31\0"+
    "\7\5\1\0\7\5\2\0\3\5\1\0\5\5\1\u0121"+
    "\25\5\31\0\7\5\1\0\7\5\2\0\3\5\1\0"+
    "\22\5\1\u0122\10\5\31\0\7\5\1\0\7\5\2\0"+
    "\3\5\1\0\10\5\1\u0123\22\5\31\0\7\5\1\0"+
    "\1\5\1\u0124\5\5\2\0\3\5\1\0\33\5\31\0"+
    "\7\5\1\0\7\5\2\0\2\5\1\u0125\1\0\33\5"+
    "\31\0\7\5\1\0\7\5\2\0\3\5\1\0\7\5"+
    "\1\u0126\23\5\31\0\7\5\1\0\7\5\2\0\3\5"+
    "\1\0\1\5\1\u0127\31\5\31\0\7\5\1\0\7\5"+
    "\2\0\3\5\1\0\4\5\1\u0128\26\5\31\0\7\5"+
    "\1\0\7\5\2\0\3\5\1\0\22\5\1\u0129\10\5"+
    "\31\0\7\5\1\0\7\5\2\0\3\5\1\0\22\5"+
    "\1\u012a\10\5\31\0\7\5\1\0\7\5\2\0\3\5"+
    "\1\0\4\5\1\u012b\26\5\31\0\7\5\1\0\7\5"+
    "\2\0\1\u012c\2\5\1\0\33\5\31\0\7\5\1\0"+
    "\7\5\2\0\3\5\1\0\1\5\1\u012d\31\5\31\0"+
    "\7\5\1\0\3\5\1\u012e\3\5\2\0\3\5\1\0"+
    "\33\5\31\0\7\5\1\0\7\5\2\0\3\5\1\0"+
    "\20\5\1\u012f\12\5\31\0\7\5\1\0\7\5\2\0"+
    "\3\5\1\0\10\5\1\u0130\22\5\31\0\7\5\1\0"+
    "\7\5\2\0\3\5\1\0\3\5\1\u0131\27\5\31\0"+
    "\7\5\1\0\7\5\2\0\3\5\1\0\10\5\1\u0132"+
    "\22\5\31\0\7\5\1\0\7\5\2\0\3\5\1\0"+
    "\7\5\1\u0133\23\5\31\0\7\5\1\0\7\5\2\0"+
    "\3\5\1\0\5\5\1\u0134\25\5\31\0\7\5\1\0"+
    "\7\5\2\0\3\5\1\0\1\5\1\u0135\31\5\31\0"+
    "\7\5\1\0\7\5\2\0\3\5\1\0\4\5\1\u0136"+
    "\26\5\31\0\7\5\1\0\3\5\1\u0137\3\5\2\0"+
    "\3\5\1\0\33\5\31\0\7\5\1\0\7\5\2\0"+
    "\3\5\1\0\2\5\1\u0138\30\5\30\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[17082];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\10\1\1\11\33\1\4\11\1\1\5\11"+
    "\1\1\3\0\4\1\3\11\3\1\1\0\40\1\3\0"+
    "\1\1\3\11\1\1\13\11\1\1\1\0\1\1\1\0"+
    "\1\1\1\11\2\1\1\11\51\1\1\11\1\0\3\11"+
    "\1\0\216\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[312];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  public String lexeme;

  private int yywrap() {       /* called at end of input */
      return 1;           /* terminate now */
  }

  private Token comment() {

    return COMMENT;
  }

  private Token check_type() {
     return IDENTIFIER;
  }



  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  Lexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 180) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 9: 
          { lexeme = yytext(); return EQUALS;
          }
        case 98: break;
        case 37: 
          { lexeme = yytext(); return EQ_OP;
          }
        case 99: break;
        case 71: 
          { lexeme = yytext(); return BOOL;
          }
        case 100: break;
        case 73: 
          { lexeme = yytext(); return EXTERN;
          }
        case 101: break;
        case 13: 
          { lexeme = yytext(); return DIVISON;
          }
        case 102: break;
        case 8: 
          { lexeme = yytext(); return GREATER_THAN_OP;
          }
        case 103: break;
        case 61: 
          { lexeme = yytext(); return ENUM;
          }
        case 104: break;
        case 7: 
          { lexeme = yytext(); return DOT;
          }
        case 105: break;
        case 22: 
          { lexeme = yytext(); return COMMA;
          }
        case 106: break;
        case 19: 
          { lexeme = yytext(); return SEMI;
          }
        case 107: break;
        case 63: 
          { lexeme = yytext(); return CHAR;
          }
        case 108: break;
        case 55: 
          { lexeme = yytext(); return RIGHT_ASSIGN;
          }
        case 109: break;
        case 80: 
          { lexeme = yytext(); return DOUBLE;
          }
        case 110: break;
        case 33: 
          { lexeme = yytext(); return IF;
          }
        case 111: break;
        case 10: 
          { lexeme = yytext(); return LESS_THAN_OP;
          }
        case 112: break;
        case 75: 
          { lexeme = yytext(); return STRUCT;
          }
        case 113: break;
        case 40: 
          { lexeme = yytext(); return ADD_ASSIGN;
          }
        case 114: break;
        case 72: 
          { lexeme = yytext(); return RETURN;
          }
        case 115: break;
        case 56: 
          { lexeme = yytext(); return LEFT_ASSIGN;
          }
        case 116: break;
        case 48: 
          { lexeme = yytext(); return OR_ASSIGN;
          }
        case 117: break;
        case 31: 
          { lexeme = yytext(); return PTR_OP;
          }
        case 118: break;
        case 88: 
          { lexeme = yytext(); return CONTINUE;
          }
        case 119: break;
        case 12: 
          { lexeme = yytext(); return TIMES;
          }
        case 120: break;
        case 20: 
          { lexeme = yytext(); return LEFT_KEY;
          }
        case 121: break;
        case 92: 
          { lexeme = yytext(); return COMPLEX;
          }
        case 122: break;
        case 83: 
          { lexeme = yytext(); return ATOMIC;
          }
        case 123: break;
        case 78: 
          { lexeme = yytext(); return SWITCH;
          }
        case 124: break;
        case 52: 
          { lexeme = yytext(); return INT;
          }
        case 125: break;
        case 27: 
          { lexeme = yytext(); return RIGHT_BRACKETS;
          }
        case 126: break;
        case 21: 
          { lexeme = yytext(); return RIGHT_KEY;
          }
        case 127: break;
        case 18: 
          { lexeme = yytext(); return EXCLAMATION;
          }
        case 128: break;
        case 54: 
          { lexeme = yytext(); return ELLIPSIS;
          }
        case 129: break;
        case 32: 
          { lexeme = yytext(); return SUB_ASSIGN;
          }
        case 130: break;
        case 41: 
          { lexeme = yytext(); return INC_OP;
          }
        case 131: break;
        case 38: 
          { lexeme = yytext(); return LE_OP;
          }
        case 132: break;
        case 60: 
          { lexeme = yytext(); return ELSE;
          }
        case 133: break;
        case 49: 
          { lexeme = yytext(); return OR_OP;
          }
        case 134: break;
        case 77: 
          { lexeme = yytext(); return SIZEOF;
          }
        case 135: break;
        case 97: 
          { lexeme = yytext(); return STATIC_ASSERT;
          }
        case 136: break;
        case 3: 
          { lexeme = yytext(); return check_type();
          }
        case 137: break;
        case 43: 
          { lexeme = yytext(); return DIV_ASSIGN;
          }
        case 138: break;
        case 64: 
          { lexeme = yytext(); return GOTO;
          }
        case 139: break;
        case 51: 
          { lexeme = yytext(); return FOR;
          }
        case 140: break;
        case 62: 
          { lexeme = yytext(); return CASE;
          }
        case 141: break;
        case 89: 
          { lexeme = yytext(); return FUNC_NAME;
          }
        case 142: break;
        case 45: 
          { lexeme = yytext(); return AND_ASSIGN;
          }
        case 143: break;
        case 65: 
          { lexeme = yytext(); return FLOAT;
          }
        case 144: break;
        case 28: 
          { lexeme = yytext(); return TILDE;
          }
        case 145: break;
        case 96: 
          { lexeme = yytext(); return THREAD_LOCAL;
          }
        case 146: break;
        case 35: 
          { lexeme = yytext(); return RIGHT_OP;
          }
        case 147: break;
        case 46: 
          { lexeme = yytext(); return AND_OP;
          }
        case 148: break;
        case 93: 
          { lexeme = yytext(); return GENERIC;
          }
        case 149: break;
        case 36: 
          { lexeme = yytext(); return GE_OP;
          }
        case 150: break;
        case 91: 
          { lexeme = yytext(); return ALIGNOF;
          }
        case 151: break;
        case 85: 
          { lexeme = yytext(); return VOLATILE;
          }
        case 152: break;
        case 42: 
          { lexeme = yytext(); return MUL_ASSIGN;
          }
        case 153: break;
        case 95: 
          { lexeme = yytext(); return IMAGINARY;
          }
        case 154: break;
        case 84: 
          { lexeme = yytext(); return UNSIGNED;
          }
        case 155: break;
        case 47: 
          { lexeme = yytext(); return XOR_ASSIGN;
          }
        case 156: break;
        //need fix
        case 1: 
          { System.out.println("error: unexpected token gg");
          }
        case 157: break;
        case 81: 
          { lexeme = yytext(); return TYPEDEF;
          }
        case 158: break;
        case 29: 
          { lexeme = yytext();  return F_CONSTANT;
          }
        case 159: break;
        case 6: 
          { /* whitespace separates tokens */
          }
        case 160: break;
        case 50: 
          { lexeme = yytext(); return NE_OP;
          }
        case 161: break;
        case 87: 
          { lexeme = yytext(); return REGISTER;
          }
        case 162: break;
        case 59: 
          { lexeme = yytext(); return AUTO;
          }
        case 163: break;
        case 44: 
          { lexeme = yytext(); return MOD_ASSIGN;
          }
        case 164: break;
        case 58: 
          { lexeme = yytext(); return VOID;
          }
        case 165: break;
        case 69: 
          { lexeme = yytext(); return SHORT;
          }
        case 166: break;
        case 25: 
          { lexeme = yytext(); return RIGHT_PARENTESES;
          }
        case 167: break;
        case 15: 
          { lexeme = yytext(); return AMPERSAND;
          }
        case 168: break;
        case 2: 
          { lexeme = yytext(); return I_CONSTANT;
          }
        case 169: break;
        case 4: 
          { lexeme = yytext(); return HYPHEN;
          }
        case 170: break;
        case 17: 
          { lexeme = yytext(); return BAR;
          }
        case 171: break;
        case 34: 
          { lexeme = yytext(); return DO;
          }
        case 172: break;
        case 30: 
          { lexeme = yytext(); return DEC_OP;
          }
        case 173: break;
        case 66: 
          { lexeme = yytext(); return UNION;
          }
        case 174: break;
        case 70: 
          { lexeme = yytext(); return WHILE;
          }
        case 175: break;
        case 82: 
          { lexeme = yytext(); return DEFAULT;
          }
        case 176: break;
        case 68: 
          { lexeme = yytext(); return CONST;
          }
        case 177: break;
        case 76: 
          { lexeme = yytext(); return SIGNED;
          }
        case 178: break;
        case 26: 
          { lexeme = yytext(); return LEFT_BRACKETS;
          }
        case 179: break;
        case 39: 
          { lexeme = yytext(); return LEFT_OP;
          }
        case 180: break;
        case 53: 
          { lexeme = yytext();  return I_CONSTANT;
          }
        case 181: break;
        case 16: 
          { lexeme = yytext(); return POWER;
          }
        case 182: break;
        case 79: 
          { lexeme = yytext(); return INLINE;
          }
        case 183: break;
        case 23: 
          { lexeme = yytext(); return COLON;
          }
        case 184: break;
        case 24: 
          { lexeme = yytext(); return LEFT_PARENTHESES;
          }
        case 185: break;
        case 86: 
          { lexeme = yytext(); return RESTRICT;
          }
        case 186: break;
        case 74: 
          { lexeme = yytext(); return STATIC;
          }
        case 187: break;
        case 90: 
          { lexeme = yytext(); return ALIGNAS;
          }
        case 188: break;
        case 67: 
          { lexeme = yytext(); return BREAK;
          }
        case 189: break;
        case 14: 
          { lexeme = yytext(); return MOD;
          }
        case 190: break;
        case 5: 
          { lexeme = yytext(); return QUESTION_MARK;
          }
        case 191: break;
        case 57: 
          { lexeme = yytext(); return LONG;
          }
        case 192: break;
        case 11: 
          { lexeme = yytext(); return PLUS;
          }
        case 193: break;
        case 94: 
          { lexeme = yytext(); return NORETURN;
          }
        case 194: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
